{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SCBC PECAN","text":"<p>Training material for the Australian PECAN+ CTF competition for South Coast Coast Baptist College in sunny Perth, Western Australia.</p> <p>It contains a series of lessons based on lab work in picoCTF.</p>"},{"location":"#approach","title":"Approach","text":"<p>Learning by doing. Doing the CTF challenges builds good foundational skills, and a familiarity with common CTF problems.</p> <ol> <li>Lab based learning from week 1.</li> <li>Kali as base OS.</li> <li>Ability to do labs from home.</li> <li>Each lab completes a CTF challenge.</li> <li>Key learning outcomes identified, with ethics and transferable skills</li> </ol>"},{"location":"#lessons-and-labs","title":"Lessons and labs","text":"<p>Learn how systems are hacked to protect our secrets. We will aim to cover using CTFs and a selection of tools to learn:</p> <ol> <li>Introduction</li> <li>General skills</li> <li>Programming - Python</li> <li>Digital forensics</li> <li>Hiding secrets (cryptography)</li> <li>Web exploitation</li> <li>Reverse engineering</li> <li>Open source intelligence operation (OSINT)</li> </ol>"},{"location":"#resources","title":"Resources","text":"<ul> <li>PECAN+ prior challenges</li> <li>picoCTF gym</li> <li>CTF101 - great for learning CTF skills</li> </ul>"},{"location":"slides-preview/","title":"Slides index","text":""},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#tag:crypto","title":"crypto","text":"<ul> <li>            \"Rock 'N' Roll\"          </li> <li>            07 Intro to cryptography          </li> <li>            Love letter          </li> <li>            Pecan Challenge Coin 2022          </li> <li>            Pico crypto          </li> </ul>"},{"location":"tags/#tag:ctf","title":"ctf","text":"<ul> <li>            01 Welcome to PECAN training          </li> <li>            CTF Strategy 2025          </li> <li>            Welcome to PECAN training          </li> </ul>"},{"location":"tags/#tag:ctf-event","title":"ctf-event","text":"<ul> <li>            About CTFs          </li> <li>            CTF Preparation Strategy          </li> <li>            Patriot CTF          </li> </ul>"},{"location":"tags/#tag:difficultymedium","title":"difficulty::medium","text":"<ul> <li>            Directory Traversal          </li> <li>            SQL Injection          </li> <li>            SSTI          </li> </ul>"},{"location":"tags/#tag:essential-skills","title":"essential-skills","text":"<ul> <li>            02 Character encoding          </li> <li>            03 Base64          </li> <li>            04 Python \ud83d\udc0d          </li> </ul>"},{"location":"tags/#tag:forensics","title":"forensics","text":"<ul> <li>            08 Intro to Forensics          </li> <li>            09 Steganography          </li> <li>            11 AI          </li> <li>            Pecan for abc          </li> <li>            Pecan stego          </li> <li>            Pico playlist forensics          </li> </ul>"},{"location":"tags/#tag:general","title":"general","text":"<ul> <li>            General skills in CTF I          </li> <li>            General skills in CTF II          </li> </ul>"},{"location":"tags/#tag:guide","title":"guide","text":"<ul> <li>            Essential linux shell skills          </li> <li>            HackTheBox Setup Guide          </li> <li>            Tools - handy ones          </li> <li>            Your hacking station          </li> </ul>"},{"location":"tags/#tag:lesson","title":"lesson","text":"<ul> <li>            01 Welcome to PECAN training          </li> <li>            02 Character encoding          </li> <li>            03 Base64          </li> <li>            04 Python \ud83d\udc0d          </li> <li>            05 Web exploitation 1          </li> <li>            06 Web exploitation 2          </li> <li>            07 Intro to cryptography          </li> <li>            08 Intro to Forensics          </li> <li>            09 Steganography          </li> <li>            10 Reverse Engineering          </li> <li>            11 AI          </li> <li>            CTF Strategy 2025          </li> <li>            Welcome to PECAN training          </li> </ul>"},{"location":"tags/#tag:pecan","title":"pecan","text":"<ul> <li>            \"Rock 'N' Roll\"          </li> <li>            Love letter          </li> <li>            Pecan - All your base          </li> <li>            Pecan Challenge Coin 2022          </li> <li>            Pecan for abc          </li> <li>            Pecan stego          </li> <li>            Pecan web          </li> </ul>"},{"location":"tags/#tag:picoctf","title":"picoCTF","text":"<ul> <li>            Directory Traversal          </li> <li>            General skills in CTF I          </li> <li>            General skills in CTF II          </li> <li>            Pico crypto          </li> <li>            Pico playlist forensics          </li> <li>            Pico playlist python          </li> <li>            Pico web client          </li> <li>            PicoCTF          </li> <li>            PicoCTF Reverse Engineering          </li> <li>            SQL Injection          </li> <li>            SSTI          </li> <li>            n0s4n1ty 1          </li> </ul>"},{"location":"tags/#tag:programming","title":"programming","text":"<ul> <li>            \"Rock 'N' Roll\"          </li> </ul>"},{"location":"tags/#tag:python","title":"python","text":"<ul> <li>            Pico playlist python          </li> </ul>"},{"location":"tags/#tag:re","title":"re","text":"<ul> <li>            10 Reverse Engineering          </li> <li>            Pecan - All your base          </li> <li>            PicoCTF Reverse Engineering          </li> </ul>"},{"location":"tags/#tag:revision","title":"revision","text":"<ul> <li>            Revision          </li> </ul>"},{"location":"tags/#tag:web-exploitation","title":"web-exploitation","text":"<ul> <li>            05 Web exploitation 1          </li> <li>            06 Web exploitation 2          </li> <li>            Directory Traversal          </li> <li>            Pecan web          </li> <li>            Pico web client          </li> <li>            SQL Injection          </li> <li>            SSTI          </li> <li>            n0s4n1ty 1          </li> </ul>"},{"location":"2025/2025-00/","title":"CTF Strategy 2025","text":"<p>Welcome to Cyber skills 2025!</p> <ul> <li>Intro</li> <li>Why CTF</li> </ul>"},{"location":"2025/2025-00/#focus-for-2025","title":"Focus for 2025","text":"<p>Training through walkthroughs. To always be planning for a CTF.</p>"},{"location":"2025/2025-00/#focus-areas","title":"Focus areas","text":"<ol> <li>Web exploitation; more</li> <li>OSINT; do the challenges, this was well done in 2024 with little training</li> <li>Python; more, use it where you can</li> <li>AI exploitation; we are seeing some of these in CTFs now, so will look at some walkthroughs</li> <li>Cryptography; very common, know the common challenges</li> <li>Binaries; how to run them and strings them</li> </ol>"},{"location":"2025/2025-00/#what-we-wont-do","title":"What we wont do","text":"<ol> <li>Networking and network forensics (we will still do web)</li> <li>Reverse engineering (apart from <code>strings</code>)</li> </ol>"},{"location":"2025/2025-00/#setup","title":"Setup","text":"<p>Ideally you can do this from school and home</p>"},{"location":"2025/2025-00/#accounts-required","title":"Accounts required","text":"<ul> <li>CTFTime</li> <li>A register of allot of CTFs we can do.</li> <li>Please confirm with your teacher and parents before joining a CTF.</li> <li>PicoCTF - you will be provided with login details</li> <li>great for training videos and challenges at all levels.</li> <li>about</li> <li>Hack The Box</li> <li>some 'simple' challenges but expects far more base knowledge</li> <li>CTF101 - great for learning CTF skills</li> </ul>"},{"location":"2025/2025-00/#ctf-attack-station","title":"CTF Attack station","text":"<ul> <li>You can use your local system for some challenges, particularly if using online tools</li> <li>Kali linux will be needed for more hacker like challenges</li> </ul>"},{"location":"2025/2025-00/#schedule-of-ctfs","title":"Schedule of CTFs","text":"<p>Proposed...</p> date ctf url walkthroughs Sat 31st May - Mon 2 Jun 2025 NOPSctf 2025 --- Official on GitHub Sat 28 - Mon 30 June 2025 CTF with Google --- [] 6-18 June 2025 US Cyber Games beginner https://ctftime.org/event/2716 https://github.com/MDaleyJr/US-Cyber-Games-SeasonIV/tree/main https://github.com/jselliott/SIV-US-Cyber-Open 18-20 Jul 2025 Down Under CTF - Official write-ups 24 Aug 2025 PeCan CTF --- -"},{"location":"2025/2025-00/#resources","title":"Resources","text":"<ul> <li>workflows for ctf</li> </ul>"},{"location":"2025/2025-04/","title":"2025-04","text":""},{"location":"2025/2025-04/#revision","title":"Revision","text":""},{"location":"2025/2025-04/#tools","title":"Tools","text":""},{"location":"2025/2025-04/#nops-preparation","title":"NOPS Preparation","text":"<p>If you are participating</p>"},{"location":"2025/2025-04/#ctf-prep","title":"CTF prep","text":""},{"location":"2025/2025-04/#ctf-day","title":"CTF day","text":"<ol> <li>Be aware of flag format e.g. <code>N0PS{Adobe InDesign 19.0 (Windows)}</code></li> <li>Read through the official write ups</li> </ol>"},{"location":"ctf-events/0_prepare/","title":"A CTF Strategy","text":"<p>How to approach CTF challenges</p>","tags":["ctf-event"]},{"location":"ctf-events/0_prepare/#strategies-to-prepare","title":"\ud83e\udd3a Strategies to Prepare","text":"<ol> <li>Know your team</li> <li>Set up your challenge work space</li> <li>Review any areas you are unsure of - use the PicoCTF videos</li> <li>Practice using walkthroughs</li> <li>Know your strengths and focus on them</li> </ol>","tags":["ctf-event"]},{"location":"ctf-events/0_prepare/#set-up-your-working-notes-space","title":"\ud83d\udccb Set up your working notes space","text":"<p>This is your working notes to communicate with yourself and your team. It will speed you up.</p> <ol> <li>Links to your online tools</li> <li>List out your Linux tools and usage tips or examples</li> <li>Hints and tips pages; you need to write this and use it</li> <li>A table to record challenges</li> <li>solved?</li> <li>who worked on it</li> <li>how to structure your working notes</li> </ol>","tags":["ctf-event"]},{"location":"ctf-events/0_prepare/#challenge-table-example","title":"Challenge table example","text":"<p>The challenge table is a way of quickly understanding where your team is at, and yourself.</p> Challenge name Difficulty (e/m/h) Solved (y/n) Team member A Team member B Link Congratulations e n x - challenge","tags":["ctf-event"]},{"location":"ctf-events/1_ctf-day/","title":"\ud83e\udd77 Strategies on challenge day","text":"<ol> <li>Triage the challenges quickly. <ul> <li>Know which ones will be easier.</li> <li>Record them in the challenge table </li> </ul> </li> <li>Easiest first. With decaying points you should focus on the easiest challenges first.</li> <li>Split up work amongst the team, record who is doing what in the challenge table</li> </ol>"},{"location":"ctf-events/1_ctf-day/#collaborate","title":"Collaborate","text":"<ol> <li>Communicate with your team!</li> <li>Take notes; share them across your team<ul> <li>Prepare your notes before the CTF</li> <li>have links to tools</li> </ul> </li> <li>Agree how to structure your notes in the team<ul> <li>per challenge notes</li> <li>scratch space for personal working</li> </ul> </li> <li>Be aware of who is working on what challenge<ul> <li>add to notes per challenge</li> </ul> </li> </ol>"},{"location":"ctf-events/1_ctf-day/#orient","title":"Orient","text":"<ol> <li>Think of what type of problem this is </li> <li>Look for any hints<ul> <li>challenge name</li> <li>attachment names</li> <li>body</li> </ul> </li> <li>Focus on a solution - take time to think critically and plan an approach, write it down</li> <li>Do targeted research</li> <li>Take notes - always practice this. Write enough so that you can give the instructions to someone else to follow.</li> </ol>"},{"location":"ctf-events/1_ctf-day/#stuck","title":"Stuck?","text":"<ol> <li>Enjoy the challenge</li> <li>Be persistant, but know when to move on</li> <li>Reflect - what worked well, what would you do different?</li> <li>get hints if available (see the rules to know what they cost)</li> <li>Be aware of cognitive bias. <ul> <li>Sometimes an assumption we have made may be incorrect </li> <li>re- read the question slowly. </li> <li>Go over your notes, re-read your planned aproach</li> </ul> </li> </ol>"},{"location":"ctf-events/about_ctf/","title":"About CTFs","text":"","tags":["ctf-event"]},{"location":"ctf-events/about_ctf/#what-is-a-ctf","title":"What is a CTF","text":"<p>Capture the flag challenges (CTF) - small challenges to demonstrate cyber concepts and flaws, to build cyber skills.</p>","tags":["ctf-event"]},{"location":"ctf-events/about_ctf/#why-ctf","title":"Why CTF","text":"<p>Cyber security requires a problem solvers mindset. Some things can be automated, some can be made into processes, but to be on the leading edge one must learn the art of being a problem solver.</p>","tags":["ctf-event"]},{"location":"ctf-events/about_ctf/#flags","title":"Flags","text":"<p>A flag is text that is enetered to the CTF platform demonstrate you have solved the CTF.</p> <p>\u26a0\ufe0f Be aware of any special formatting required</p>","tags":["ctf-event"]},{"location":"ctf-events/about_ctf/#common-challenge-types","title":"Common challenge types","text":"<p>Most common is the jeopardy style CTF, a collection of challenges to solve. With demonstration odf solution with a proof or flag that can be automatically marked. PECAN+ is a jeopardy style CTF.</p> <p>Most challenges will fall into these catagories</p> <ol> <li>General skills - skills realted to programming and sytem administration</li> <li>Web exploitation - manipulation of web based technologies to leak data or gain execution</li> <li>Binary exploitation - manipulation of progam execution to gain control</li> <li>Reverse engineering - study of an executable file to elicit its behaviour</li> <li>Cryptography - ciphers and encryption challenges</li> <li>Steganography - the hiding of data in plain view</li> <li>Forensics - data collectionand analysis, including network, memory and disk</li> <li>OSINT - the discovery of intelligence in open sources</li> </ol>","tags":["ctf-event"]},{"location":"ctf-events/about_ctf/#essential-skillz","title":"Essential skillz","text":"<ol> <li>Reading carefully</li> <li>Programming</li> <li>Understanding data encoding</li> <li>Command-line-fu</li> </ol>","tags":["ctf-event"]},{"location":"ctf-events/about_ctf/#essential-tools","title":"Essential tools","text":"<p>a fool with a tool is still a fool Grady Booch - Software Engineer</p>","tags":["ctf-event"]},{"location":"ctf-events/about_ctf/#core-tools","title":"Core tools","text":"<p>these tools are a must</p> <ol> <li>Python - scripting language</li> <li>Cyber chef - web based data manipulation</li> <li>Kali - operating system</li> </ol>","tags":["ctf-event"]},{"location":"ctf-events/about_ctf/#advanced-tools","title":"Advanced tools","text":"<ol> <li>Boxentriq  -</li> <li>Ghidra - reverse engineering</li> <li>[wxHexEditor - hex editor]</li> <li>Wireshark</li> <li>ChatGPT</li> </ol>","tags":["ctf-event"]},{"location":"ctf-events/about_picoctf/","title":"PicoCTF","text":"","tags":["picoCTF"]},{"location":"ctf-events/about_picoctf/#what-is-picoctf","title":"What is PicoCTF","text":"<p>PicoCTF is s site that contains lots of little CTF challenges, they are representative of PECAN+</p>","tags":["picoCTF"]},{"location":"ctf-events/about_picoctf/#create-an-account","title":"Create an account","text":"<ol> <li>Visit picoCTF practice gym</li> <li>Create a new account - use an email address you can access readily<ul> <li>Choose a password and username you can enter in a fair bit - we need it to log into a webshell</li> </ul> </li> </ol>","tags":["picoCTF"]},{"location":"ctf-events/about_picoctf/#explore-the-site","title":"Explore the site","text":"","tags":["picoCTF"]},{"location":"ctf-events/about_picoctf/#join-the-classroom","title":"Join the classroom","text":"<p>20 accounts have been pre-registered</p>","tags":["picoCTF"]},{"location":"ctf-events/about_picoctf/#challenges","title":"Challenges","text":"<p>A list of all the challenges you can complete.</p>","tags":["picoCTF"]},{"location":"ctf-events/about_picoctf/#pico-ctf-playlists","title":"Pico CTF playlists","text":"<p>We will use the playlists to get a good set of challenges to work on.</p>","tags":["picoCTF"]},{"location":"ctf-events/about_picoctf/#picoctf-webshell","title":"picoCTF webshell","text":"<p>Some challenges allow access to a cmd line interface to an Ubuntu host; this can be used to solve challenges in place.</p>","tags":["picoCTF"]},{"location":"ctf-events/about_picoctf/#resources","title":"Resources","text":"<ol> <li>picoctf</li> <li>some write ups</li> </ol>","tags":["picoCTF"]},{"location":"ctf-events/patriot_ctf/","title":"Patriot CTF","text":"<p>We participated in Patriot CTF 2024</p> <ul> <li>Find Patriot CTF 2023 here</li> <li>This is a good example of a write up challenger write up</li> </ul>","tags":["ctf-event"]},{"location":"guides/ctf_strategy/","title":"CTF strategy","text":""},{"location":"guides/ctf_strategy/#prepare","title":"Prepare","text":"<ol> <li>Use tools to assist your work, know your core tools</li> <li>Practice</li> <li>Read the rules</li> </ol>"},{"location":"guides/htb-setup/","title":"HackTheBox Setup Guide","text":"","tags":["guide"]},{"location":"guides/htb-setup/#set-up-an-account-if-you-have-not-done-so","title":"Set up an account if you have not done so","text":"","tags":["guide"]},{"location":"guides/htb-setup/#get-your-vpn-profile","title":"Get your vpn profile","text":"<ol> <li>Top right -&gt; select your profile -&gt; vpn settings</li> <li>Select a VPN profile<ul> <li>US Academy 6</li> <li>TCP 443</li> </ul> </li> <li>Save this and keep it</li> <li>Connect to the vpn:</li> </ol> <pre><code>sudo openvpn &lt;vpn-file.ovpn&gt;\n</code></pre> <p>You now have a interface on the htb lab network!</p>","tags":["guide"]},{"location":"guides/infrastucture/","title":"Infrastructure for CTF","text":"<p>Just some thoughts on infrastructure.</p>"},{"location":"guides/infrastucture/#principals","title":"Principals","text":"<ul> <li>Ability to easily re-deploy a ctf workstation</li> <li>Kali is the most commonly expected, but really just need common tools installed on a debian host.</li> <li>Full virtualisation will be more reliable than a container. There can be some issues with port mapping when doing scanning etc.</li> </ul>"},{"location":"guides/infrastucture/#virtualisation","title":"Virtualisation","text":""},{"location":"guides/infrastucture/#virtualbox","title":"VirtualBox","text":"<p>Run on a Windows or Linux host</p>"},{"location":"guides/infrastucture/#vagrant","title":"Vagrant","text":"<p>Tool to stand up a virtual machine from an already built image, good for brining a host up and re-hydrating.</p>"},{"location":"guides/infrastucture/#proxmox","title":"Proxmox","text":"<p>Open source platform to host virtual machines</p> <ul> <li>proxmox</li> <li>proxmox howto</li> <li>proxmox home lab</li> </ul>"},{"location":"guides/infrastucture/#kali-infra","title":"Kali infra","text":"<p>Some resources for investigating kali builds</p> <ul> <li>kali packer</li> <li>packer kali</li> <li>build scripts</li> </ul>"},{"location":"guides/linux_shell/","title":"Essential linux shell skills","text":"<p>Allot of the CTF challenges require skills in the Linux command line tools. Embrace it, and practice.</p> <p>During competition you will have access to a kali workstation. This is a Linux system that you will need to be familiar with.</p>","tags":["guide"]},{"location":"guides/linux_shell/#gotchas","title":"Gotchas","text":"<p>In the terminal keep in mind:</p> <ol> <li>Your current working directory - where are you and your scripts</li> <li>Your PATH - a script not in PATH will not be found - so run it explicitly</li> <li>Executable - if you think you can run something but get a fail - check it is executable</li> <li>Scripts - if not made executable can be called by the interpreter directly e.g <code>python3 ./my_script.py</code></li> <li>Permissions - do you need to use sudo</li> <li>Output - know where your output will go</li> </ol>","tags":["guide"]},{"location":"guides/linux_shell/#youtube-tutorial","title":"YouTube tutorial","text":"","tags":["guide"]},{"location":"guides/linux_shell/#quick-reference","title":"Quick reference","text":"<ul> <li> <p> Essentials</p> <ul> <li>Start a terminal: <code># usually &lt;CTRL&gt; + &lt;SHIFT&gt; + &lt;t&gt;</code></li> <li>Tab completeion - use it : <code>TAB</code></li> <li>Who am i <code>id</code></li> </ul> </li> <li> <p> Navigating directories</p> <ul> <li>Print working directory: <code>pwd</code></li> <li>List contents: <code>ls -lah</code></li> <li>List in a nice tree: <code>tree &lt;dirname&gt;</code></li> <li>Change directory: <code>cd &lt;dir name&gt;</code></li> <li>Change to home <code>cd ~</code></li> <li>Make a new dir: <code>mkdir &lt;dirname&gt;</code></li> <li>Many tools have a man page: <code>man &lt;toolname&gt;</code></li> </ul> </li> <li> <p> File actions</p> <ul> <li>Finding files: <code>find . -type f -iname \"*.txt\"</code></li> <li>Show permissions: <code>ls -la</code></li> <li>Changing permissions: <code>chmod</code></li> <li>Make it executable: <code>chmod +x</code></li> <li>Download a file: <code>wget &lt;url&gt;</code></li> <li>Extract a file: <code>unzip &lt;filename&gt;</code></li> </ul> </li> <li> <p> Analysing Files</p> <p>Remember binary files are different to text files</p> </li> <li> <p>What type of file: <code>file &lt;filename&gt;</code></p> </li> <li>Show file metadata: <code>exiftool &lt;filename&gt;</code></li> <li>Show file content: <code>cat &lt;filename&gt;</code></li> <li>Show file structure: <code>binwalk &lt;filename&gt;</code></li> <li>Find content in a file: <code>grep -ir findme &lt;filename&gt;</code></li> <li> <p>Show strings in a file: <code>strings &lt;filename&gt;</code></p> </li> <li> <p> Script</p> <p>Make a new directory for a challenge:</p> <pre><code>cd ~/\nnewdir='challenge_name'\ncd ~\nmkdir ~/$newdir\ncd $newdir\n</code></pre> </li> <li> <p> Connect</p> <ul> <li>get a shell on another system: <code>ssh &lt;user@&lt;host&gt;</code></li> <li>Connect to an open port with netcat: <code>nc &lt;IP&gt;  &lt;PORT&gt;</code></li> </ul> </li> </ul>","tags":["guide"]},{"location":"guides/linux_shell/#handy-guides","title":"Handy guides","text":"<p>Do have a look at these if you are looking for more</p> <ul> <li>Linux command line for beginners</li> <li>Essential Linux commands</li> <li>learn unix</li> </ul>","tags":["guide"]},{"location":"guides/tools/","title":"Tools - handy ones","text":"<ul> <li> <p> Multi tool</p> <ul> <li>Your go to tool is CyberChef<ol> <li>Load input</li> <li>Add recipies</li> <li>Load an existing recipie</li> </ol> </li> </ul> </li> <li> <p> Crypto Tools</p> <p>Use these tools to identify encoding or encryption</p> <ul> <li>boxentriq - cipher identifier<ul> <li>good for identifying standsard encoding or encryption</li> </ul> </li> <li>dcode - multi puzzle tool<ul> <li>a bit finicky</li> <li>useful for specific puzzle types</li> </ul> </li> </ul> </li> <li> <p> Web Tools</p> <ul> <li>Web inspector on the browser (easy)<ul> <li>view page source</li> <li>cookies</li> <li>scripts</li> </ul> </li> <li>Gobuster (kali)<ul> <li>directory enumeration (moderate)</li> </ul> </li> <li>BurpSuite (kali)<ul> <li>request inspection and modification (challenging)</li> </ul> </li> </ul> </li> <li> <p> Analysing Files     Use a linux terminal</p> <ul> <li>Strings</li> <li>ExifTool</li> </ul> </li> <li> <p> Scripting Use Python</p> <ol> <li>Execute python</li> <li>Use the Python interactive shell</li> </ol> </li> <li> <p> Connect</p> </li> </ul>","tags":["guide"]},{"location":"guides/tools/#gobuster","title":"Gobuster","text":"<p>A tool to enumerate web sites</p> <p>Handy guide</p>","tags":["guide"]},{"location":"guides/tools/#burpsuite","title":"Burpsuite","text":"<p>This tool is for web testing. A startup guide</p>","tags":["guide"]},{"location":"guides/tools/#reversing","title":"Reversing","text":"","tags":["guide"]},{"location":"guides/tools/#objdump","title":"Objdump","text":"","tags":["guide"]},{"location":"guides/tools/#ghidra","title":"Ghidra","text":"<p>Is an open source software reverse engineering suite of tools.</p> <p>Find the tool site here</p> <pre><code>sudo apt install -y openjdk-17-jdk\nwget https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_11.1.1_build/ghidra_11.1.1_PUBLIC_20240614.zip\nunzip ghidra_11.1.1_PUBLIC_20240614.zip \n# lets run ghidra\n./ghidra_11.1.1_PUBLIC_20240614/ghidraRun\n</code></pre>","tags":["guide"]},{"location":"labs/revision/","title":"Revision","text":"","tags":["revision"]},{"location":"labs/revision/#pecan-practice-challenges","title":"PECAN+ practice challenges","text":"<ul> <li>try the OSINT category</li> <li>Kidnapped 1</li> <li>Kidnapped 2</li> <li>Kidnapped 3</li> </ul>","tags":["revision"]},{"location":"labs/revision/#ctf-practice","title":"CTF practice","text":"<ul> <li>ASD ANU CTF 2024 site now down</li> </ul>","tags":["revision"]},{"location":"labs/revision/#recognise-this-sting","title":"Recognise this sting","text":"<ol> <li><code>QXJlIHlvdSByZWFkeSB0byBDYXB0dXJlIEZsYWdzPw==</code></li> <li><code>l3375p34k_15_u53d_t00</code></li> <li><code>41 72 65 20 79 6f 75 20 72 65 61 64 79 20 74 6f 20 43 61 70 74 75 72 65 20 46 6c 61 67 73 3f</code></li> </ol>","tags":["revision"]},{"location":"labs/revision/#crypto-identifier","title":"Crypto identifier","text":"<p>Lets test out cipher identifiers</p> <ul> <li>boxentriq cipher identifier</li> <li>dcode</li> </ul> <p>Enter the string <code>WMHD35RA3NIDSXTOHR3MTA0YUHCE4LNP</code> and analyse</p>","tags":["revision"]},{"location":"labs/revision/#cyberchef","title":"cyberchef","text":"<p>load up the <code>caesar box cipher</code> tool</p>","tags":["revision"]},{"location":"labs/revision/#leetspeak","title":"Leetspeak","text":"<p>Be aware of and look out for</p>","tags":["revision"]},{"location":"labs/revision/#todo","title":"TODO","text":"<ul> <li>playbook examples to learn</li> <li>command line trophies (grep with regex, cat, ls, file, binwalk, exiftool, dd)</li> <li>converting file formats (bin, utf8, hex, b64, rot)</li> <li>working in python</li> </ul>","tags":["revision"]},{"location":"labs/pecan/pecan_allbase/","title":"Pecan - All your base","text":"<p>All your base</p> <p>This challenge can be solved a couple of ways</p>","tags":["pecan","re"]},{"location":"labs/pecan/pecan_allbase/#we-have-source","title":"We have source","text":"<p>The file we download is a c source code file</p> <p>When you have source, it makes reverse engineering allot easier.</p> <p>See if you can read the source to find the flag...</p> <pre><code>dir=re_base\nmkdir $dir &amp;&amp; cd $dir\nwget https://pecanplus.ecusdf.org/challenges/allyourbase/All_your_base.c\nwget https://github.com/elzoughby/Base64/raw/master/base64.c\nwget https://github.com/elzoughby/Base64/raw/master/base64.h\n</code></pre>","tags":["pecan","re"]},{"location":"labs/pecan/pecan_allbase/#static-binary-analysis","title":"Static binary analysis","text":"<p>now compile it</p> <pre><code>gcc -c -g base64.c\ngcc -c -g All_your_base.c\ngcc -o main base64.o All_your_base.o\n</code></pre>","tags":["pecan","re"]},{"location":"labs/pecan/pecan_allbase/#run-strings","title":"run strings","text":"<pre><code>strings main | less\n</code></pre>","tags":["pecan","re"]},{"location":"labs/pecan/pecan_allbase/#objdump","title":"Objdump","text":"<pre><code>objdump -drS main | less\n</code></pre>","tags":["pecan","re"]},{"location":"labs/pecan/pecan_coin/","title":"Pecan Challenge Coin 2022","text":"<p>title: 2022 Challenge Coin link: link type: cryptography difficulty: advanced status: unsolved flag:</p> <p>Coins usually work outer to inner</p>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_coin/#outer","title":"outer","text":"<p>WMHD35RA3NIDSXTOHR3MTA0YUHCE4LNP</p> <p>boxentriq - likely columnar trnsposition cipher</p> <pre><code>Caesar_Box_Cipher(2)\n</code></pre> <p><code>WH3R3ISTH3T0UC4NMD5ANDXORMAYHELP</code></p> <p>Where is the toucan md5 and xor may help</p> <ol> <li>where is toucan<ul> <li>toucan</li> <li>gaurenteed not secure</li> <li>look at the algorithm on github</li> </ul> </li> <li> <p>md5</p> <ul> <li>32 hexadecimal characters equal 16 bytes IV</li> <li>key or IV?</li> </ul> <pre><code>echo 'WH3R3ISTH3T0UC4NMD5ANDXORMAYHELP' | md5sum     \n184b39d37e9b3603bfe26c70d14373c1\n</code></pre> </li> <li> <p>xor</p> <ul> <li>key or IV</li> <li>weakness in the cipher?</li> </ul> </li> </ol> <pre><code>./toucan decrypt msgFile keyFile IVFile [outputFile]\n\necho -n \"key\" | ./toucan decrypt file.out /dev/stdin IV file.decrypted\n</code></pre> <ol> <li>msgFile<ul> <li>likely <code>89F72F41AB9001F122B63E244BEDB0C7BFEA661DFC8241A36B955B01666C2E3B08AD6017DF4</code></li> <li>save as bytes to file</li> </ul> </li> <li>keyFile<ul> <li>a secret</li> </ul> </li> <li>IV file<ul> <li>a secondary key that does not have to be secret</li> <li>MD5 of something fits the 16byte IV for 128bit</li> </ul> </li> </ol>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_coin/#inner","title":"INNER","text":"<p>89F72F41 AB9001F122B63E 244BEDB0C7BFEA66</p> <p>1DFC8241A36B955B 01666C2E3B08AD6 017DF4</p> <p>89F72F41AB9001F122B63E244BEDB0C7BFEA661DFC8241A36B955B01666C2E3B08AD6017DF4</p>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_coin/#dcode","title":"dcode","text":"<p>Comes up as ASCCI shift cipher  +40 is closest? but none really</p>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_coin/#heiro","title":"HEIRO","text":"<p>ABCDEDBF GAHDB</p> <p>ABCDEDBFGAHDB</p>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_coin/#try","title":"try","text":"<p>dcode.fr</p>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_coin/#using-part-as-a-key","title":"using part as a key","text":"<ol> <li>looks like the main inner is encryptin - use outer as key</li> </ol>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_crypto_love_letter/","title":"Love letter","text":"","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_crypto_love_letter/#key-skills","title":"Key skills","text":"<ol> <li>Reading python</li> <li>Understanding ascii encoding</li> <li>Writing python <ol> <li>Researching what you need</li> <li>Debuggingpt</li> </ol> </li> </ol>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_crypto_love_letter/#solving","title":"Solving","text":"","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_crypto_love_letter/#read-the-challenge-instructions","title":"Read the challenge instructions","text":"<p>Tip</p> <ol> <li>Difficulty - use this to frame complexity of the solution</li> <li>What to do - decrypt ciphertext back to plain text</li> <li>What You have<ol> <li>ciphertext</li> <li>Python script</li> </ol> </li> </ol>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_crypto_love_letter/#lets-look-at-the-python-script","title":"Lets look at the python script","text":"<p>After downloading the python script...</p> <pre><code>def encryptionFunction():\n    #Variables\n    ciphertext = []\n    ascii_values = []  \n\n    #Prompt to enter plaintext to be encrypted\n    plaintext = input('Please enter text to be encrypted: ')\n\n    #Each letter in the message is converted to ASCII and\n    #appended to a list\n    for character in plaintext:\n        ascii_values.append(ord(character))\n\n    #Each ASCII character is multiplied by 3\n    for element in ascii_values:\n        ciphertext.append(element * 3)\n\n    #Ciphertext is returned\n    return ciphertext\n</code></pre> <p>cool it gives us the encyption algorithm</p>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_crypto_love_letter/#solve-it","title":"Solve it!","text":"<p>Hints</p> <ol> <li>Remember we can use chatGPT to ask what the script does</li> <li>Try reversing what the script does</li> </ol>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_crypto_love_letter/#resources","title":"Resources","text":"<ul> <li>representation vs encoding 1</li> <li>encoding</li> </ul>","tags":["pecan","crypto"]},{"location":"labs/pecan/pecan_crypto_rock-n-roll/","title":"\"Rock 'N' Roll\"","text":"<p>type: cryptography difficulty: advanced</p>","tags":["pecan","crypto","programming"]},{"location":"labs/pecan/pecan_crypto_rock-n-roll/#challenge","title":"Challenge","text":"<p>\"Jerry was a racecar driver, Knock Jerry down, Build Jerry up. Captain Pierce was a strong man, Put Jerry with Captain Pierce into The Racecar.\"</p>","tags":["pecan","crypto","programming"]},{"location":"labs/pecan/pecan_crypto_rock-n-roll/#facts","title":"Facts","text":"<ol> <li>This is a crypto challenge</li> <li>racecar is a pallindrome</li> <li>there is unnecesary capitalisation</li> <li>The title is a hint</li> </ol> Hint <p>look for picoCTF challenge <code>1_wanna_b3_a_r0ck5tar</code> or <code>mus1c</code></p> Walkthrough <p>Use the Rockstar interpreter here</p> <p>Read the docs</p>","tags":["pecan","crypto","programming"]},{"location":"labs/pecan/pecan_crypto_rock-n-roll/#rockstar-interpritation","title":"Rockstar interpritation","text":"<ol> <li>Jerry was a racecar driver,<ul> <li>A poetic number literal</li> <li>initialise varialbe Jerry with number 1 7 6</li> </ul> </li> <li>Knock Jerry down <ul> <li>decrement Jerry</li> </ul> </li> <li>Build Jerry up<ul> <li>increment Jerry</li> </ul> </li> <li>Captain Pierce was a strong man<ul> <li>A poetic number literal</li> <li>Initialise 'Captain Pierce' to: 1 6 3 </li> </ul> </li> <li>Put Jerry with Captain Pierce into The Racecar<ul> <li>add Jerry to Captain Pierce and assign result to The Racecar</li> </ul> </li> </ol> <p>This successfully executes but does not print, so we need to get it to print to STDOUT.</p> <p>Add a write to STDOUT <code>Say The Racecar</code></p>","tags":["pecan","crypto","programming"]},{"location":"labs/pecan/pecan_for_abc/","title":"Pecan for abc","text":"<ol> <li>Load in wireshark</li> <li> <p>Start near the bottom of the pcap</p> </li> <li> <p>Telnet a plain text protocol</p> </li> <li> <p>seqence 394 has the flag</p> </li> <li> <p>filter <code>tcp.port == 23 and tcp.len &gt; 0</code></p> </li> </ol>","tags":["pecan","forensics"]},{"location":"labs/pecan/pecan_stego/","title":"Pecan stego","text":"","tags":["pecan","forensics"]},{"location":"labs/pecan/pecan_stego/#head-in-the-clouds","title":"Head in the clouds","text":"","tags":["pecan","forensics"]},{"location":"labs/pecan/pecan_stego/#matchy-matchy","title":"Matchy Matchy","text":"","tags":["pecan","forensics"]},{"location":"labs/pecan/pecan_stego/#take-note","title":"Take note","text":"","tags":["pecan","forensics"]},{"location":"labs/pecan/pecan_stego/#the-nerd","title":"The nerd","text":"<p>This is a fairly simple data hiding, using standard file features...</p>  Walkthrough <ol> <li>Make a clean workspace...</li> <li>Download the file <code>wget https://pecanplus.ecusdf.org/challenges/thenerd/nerd.jpg</code></li> <li>Examine the EXIF <code>exiftool nerd.jpg</code></li> <li>What doesnt look right...</li> <li>What format is the text (hint there is only 0-9 a-f in the string)</li> </ol>","tags":["pecan","forensics"]},{"location":"labs/pecan/pecan_stego/#aloha","title":"Aloha","text":"","tags":["pecan","forensics"]},{"location":"labs/pecan/pecan_stego/#steg-cat-practice","title":"Steg Cat Practice","text":"<p>An exercise in repairing Python</p>  Walkthrough <ol> <li> <p>Lets grab the files <pre><code>cd ~\ndir='stegcat'\nmkdir $dir &amp;&amp; cd $dir\nwget https://pecanplus.ecusdf.org/challenges/steg-cat-practice/practice_image.png\nwget https://pecanplus.ecusdf.org/challenges/steg-cat-practice/main_script_Practice.py\nwget https://pecanplus.ecusdf.org/challenges/steg-cat-practice/LSBStegPractice_Script_To_Student.py\n</code></pre></p> </li> <li> <p>We can see from the file names this is likely an LSB challenge (Least Significant Bit)</p> </li> <li>Lets ahave a look at the scripts <pre><code>nano -c main_script_Practice.py\nnano -c LSBStegPractice_Script_To_Student.py\n</code></pre></li> <li>Great - we have an LSB implemntation run like <code>LSBSteg.py decode -i &lt;input&gt; -o &lt;output&gt;</code></li> <li>Have quickl look oin the internet - this looks like LSBSteg.py</li> <li>Ok lets try running it as is <pre><code>python3 main_script_Practice.py\n</code></pre></li> <li>Fails to run... now we need to troubleshoot the code...<ol> <li>errant '&amp;' - try deleting it</li> <li>no cv2     <code>pip install opencv-python</code></li> <li>there is an exception raised that looks unreasonable<ul> <li>lets try commenting out that line</li> </ul> </li> </ol> </li> <li>It may be more useful to grab the origianl code and call that</li> </ol> <pre><code>wget https://github.com/RobinDavid/LSB-Steganography/blob/master/LSBSteg.py\n</code></pre> <pre><code>from LSBSteg import *\n\n# decoding\nim = cv2.imread(\"practice_image.png\")\nsteg = LSBSteg(im)\nprint(\"Text value:\",steg.decode_text())\n</code></pre> <p>Bit short cutty but got us there. Encouraged to spend more time looking at why the modified library failed</p>","tags":["pecan","forensics"]},{"location":"labs/picoctf/pico_crypto/","title":"Pico crypto","text":"","tags":["picoCTF","crypto"]},{"location":"labs/picoctf/pico_crypto/#mod-26-and-13","title":"'Mod 26' and '13'","text":"<p>Good hint here <code>ROT13</code></p>  Walkthrough <ol> <li>open up cyberChef</li> <li>apply the recipie: <pre><code>ROT13(true,true,false,13)\n</code></pre></li> <li>Submit the flag!</li> </ol>","tags":["picoCTF","crypto"]},{"location":"labs/picoctf/pico_crypto/#caesar","title":"caesar","text":"<p>A good demo of caesar</p>  Walkthrough <ol> <li> <p>We get given text like: <code>picoCTF{dspttjohuifsvcjdpoabrkttds}</code></p> </li> <li> <p>Yours will probably be different, so dont use this one.</p> </li> <li> <p>Lets get just the ciphertext <code>dspttjohuifsvcjdpoabrkttds</code></p> </li> <li> <p>open up cyberChef</p> </li> <li> <p>Load the recipie <code>ROT13</code></p> </li> <li> <p>Paste in teh ciphertext</p> </li> <li> <p>Increment/Decrement until you get some plaintext</p> </li> </ol>","tags":["picoCTF","crypto"]},{"location":"labs/picoctf/pico_crypto/#easy1","title":"Easy1","text":"<p>This is not too bad as far as crypto goes, but will be easier with Python.</p>  Hint <p>This is  a one time pad problem </p>  Walkthrough <pre><code>import string\nfrom collections import deque\n\nkey = 'SOLVECRYPTO'\nciphertext = 'UFJKXQZQUNB'\n\n# deque is a handy module to handle collections\n# great if we had a rotation applied\notp = deque(list(string.ascii_uppercase))\n\n# make an empty list to storee decrypt\ndecrypt=[]\n\n# loop over each charachter in the ciphertext\nfor idx, char in enumerate(ciphertext):\n    # get the numeric value of the ciphertext char\n    charIdx = otp.index(ciphertext.upper()[idx])\n    # get the numeric value of the key char\n    keyIdx = otp.index(key.upper()[idx])\n    # Reverse the standard encryption algorithm\n    # which is (cipher - key) mod 26\n    cipher_num = (charIdx - keyIdx) % len(otp)\n    # now lookup what char the number represents in our pad\n    char = otp[cipher_num]\n    # and add the char to a list\n    decrypt.append(char)\n\n# lets print out our plaintext list\nprint(''.join(decrypt))\n</code></pre> <p>To Brute force check out the script in the repo  <code>/src/Easy1.py</code></p>","tags":["picoCTF","crypto"]},{"location":"labs/picoctf/pico_crypto/#more-cookies","title":"More Cookies","text":"<p>If you have done \"Cookies\" this is more of a crypto challenge</p>  Walkthrough <p>Under Construction</p> <p>If you are here, Check out one online...</p> <p>https://picoctf2021.haydenhousen.com/web-exploitation/more-cookies</p>","tags":["picoCTF","crypto"]},{"location":"labs/picoctf/pico_playlist_forensics/","title":"Pico playlist forensics","text":"","tags":["picoCTF","forensics"]},{"location":"labs/picoctf/pico_playlist_forensics/#_1","title":"Pico playlist forensics","text":"Walkthrough <ol> <li>Make a new directory to work in  and cd into it <pre><code>cd ~\ndir='garden'\nmkdir $dir &amp;&amp; cd $dir \n</code></pre></li> <li>Grab the file - your url may be different <pre><code>wget\n</code></pre></li> </ol>","tags":["picoCTF","forensics"]},{"location":"labs/picoctf/pico_playlist_forensics/#forensics-i","title":"Forensics I","text":"","tags":["picoCTF","forensics"]},{"location":"labs/picoctf/pico_playlist_forensics/#information","title":"Information","text":"<p>A good image forensics exercise.</p>  Walkthrough <ol> <li>Make a new directory to work in  and cd into it <pre><code>cd ~\ndir='information'\nmkdir $dir &amp;&amp; cd $dir \n</code></pre></li> <li>Now grab the file of interest <pre><code># your url may differ!\nwget https://mercury.picoctf.net/static/7cf6a33f90deeeac5c73407a1bdc99b6/cat.jpg\n</code></pre></li> <li>Remember a jgp has EXIF data, lets look there first <pre><code>exiftool cat.jpg\n</code></pre></li> <li>you should have output like: <pre><code>exiftool cat.jpg \nExifTool Version Number         : 12.40\nFile Name                       : cat.jpg\nDirectory                       : .\nFile Size                       : 858 KiB\nFile Modification Date/Time     : 2021:03:15 18:24:46+00:00\nFile Access Date/Time           : 2024:06:10 07:16:40+00:00\nFile Inode Change Date/Time     : 2024:06:10 07:16:40+00:00\nFile Permissions                : -rw-rw-r--\nFile Type                       : JPEG\nFile Type Extension             : jpg\nMIME Type                       : image/jpeg\nJFIF Version                    : 1.02\nResolution Unit                 : None\nX Resolution                    : 1\nY Resolution                    : 1\nCurrent IPTC Digest             : 7a78f3d9cfb1ce42ab5a3aa30573d617\nCopyright Notice                : PicoCTF\nApplication Record Version      : 4\nXMP Toolkit                     : Image::ExifTool 10.80\nLicense                         : cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9\nRights                          : PicoCTF\nImage Width                     : 2560\nImage Height                    : 1598\nEncoding Process                : Baseline DCT, Huffman coding\nBits Per Sample                 : 8\nColor Components                : 3\nY Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)\nImage Size                      : 2560x1598\nMegapixels                      : 4.1\n</code></pre></li> <li>Notice the data that stands out? <code>Licence</code> looks interesting<ul> <li>it is not words you would expect of a licence</li> <li>it contains base64 alphanumeric chars</li> </ul> </li> <li>Try and unbase64 it...</li> </ol>","tags":["picoCTF","forensics"]},{"location":"labs/picoctf/pico_playlist_forensics/#glory-of-the-garden","title":"Glory of the Garden","text":"Walkthrough <ol> <li>Make a new directory to work in  and cd into it <pre><code>cd ~\ndir='garden'\nmkdir $dir &amp;&amp; cd $dir \n</code></pre></li> <li>Grab the file - your url may be different <pre><code>wget https://jupiter.challenges.picoctf.org/static/43c4743b3946f427e883f6b286f47467/garden.jpg\n</code></pre></li> <li>Lets look at the EXIF <pre><code>exiftool garden.jpg\n</code></pre></li> <li>Nothing obvious here</li> <li>Lets run a quick strings over the file - remember that looks through the binary data for any bytes that represent charachters. <pre><code>strings garden.jpg\n</code></pre></li> <li>Flag?</li> </ol>","tags":["picoCTF","forensics"]},{"location":"labs/picoctf/pico_playlist_forensics/#enhance","title":"Enhance","text":"<p>A look into SVG format, and some scripting to help wrangle the flag out of the text.</p>  Walkthrough <ol> <li>Make a new directory to work in  and cd into it <pre><code>cd ~\ndir='enhance'\nmkdir $dir &amp;&amp; cd $dir \n</code></pre></li> <li>Grab the file - your url may be different <pre><code>wget https://artifacts.picoctf.net/c/102/drawing.flag.svg\n</code></pre></li> <li>Do a <code>strings</code> on the file</li> <li>Notice that it is XML - no binary data</li> <li>The <code>id</code> field looks useful - lets grab them all and concatenate them <pre><code>\n</code></pre></li> <li>A script would be quicker than extracting by hand. We can ask chat gpt something like: <pre><code>write python3 to extract the text of the id elements from an svg file named 'drawing.flag.svg' and concatenate them to print with no spaces\n</code></pre></li> <li> <p>After fixing some generative AI bugs , we can get some Python like <pre><code>import xml.etree.ElementTree as ET\n\ndef extract_tspan_from_id(svg_file):\n    tree = ET.parse(svg_file)\n    root = tree.getroot()\n    id_text=[]\n\n    for elem in root.iter():\n        if ('id' in elem.attrib) and (elem.text):\n            id_text.append(elem.text)\n\n    return id_text\n\n# Replace 'drawing.flag.svg' with the path to your SVG file\nsvg_file = 'drawing.flag.svg'\nflag = extract_tspan_from_id(svg_file)\n\nprint(''.join(flag).replace(' ',''))\n</code></pre></p> </li> <li> <p>You can copy nad paste this into a python file like:</p> </li> </ol> <pre><code>nano solve.py\n# Then CTRL+v\n# Then CTRL+s\n# Then CTRL+x\n\n# Run it using:\npython3 ./solve.py\n</code></pre>","tags":["picoCTF","forensics"]},{"location":"labs/picoctf/pico_playlist_general_1/","title":"General skills in CTF I","text":"<p>link to pico general playlist</p> <p>We need to be getting a good at these foundational skills: </p> <ol> <li>A computer stores information in binary </li> <li>Understanding number representation in computers</li> <li>Understanding the same number can be represented in different bases (binary, octal, decimal, hexadecimal)</li> <li>Familiar with basic charachter encding (ASCII, UTF-8)</li> </ol> <p>For more information:</p> <ul> <li>Number systems tutorial with Python</li> <li>What is charachter encoding</li> </ul>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_1/#problem-set-1","title":"Problem set 1","text":"<p>remember to submit flags in the format <code>picoCTF{flag}</code></p>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_1/#lets-warm-up","title":"Lets warm up","text":"<ul> <li>Background reading 1</li> <li>Background reading 2</li> </ul> <p>Hints</p> <p>This is a lesson in charachter encoding we can solve it using  the following walkthrough. Click on walkthrough to expand it.</p> Walkthrough <ol> <li>open up the pico <code>&gt;_Webshell</code> <pre><code># Start an interactive python session\npython3\n\n# assign the hexadecimal number to the variable 'ord'\nord = 0x70\n\n# show me the number representation\nhex(ordinal)\nbin(ord)\nprint(ord)\n\n# show me the charachter representation using ascii encoding\nchr(ord)\n\n# exit the interactive session\nexit()\n</code></pre></li> <li>Using cyberchef<ol> <li>Open cyberchef</li> <li>Enter <code>0x70</code> into the iput field</li> <li>Search for 'hex'</li> <li>drag and drop <code>from hex</code> onto the recipie</li> <li>check the output</li> <li>remove the '0x' in front of the input value - did it change the output?</li> </ol> </li> <li>Enter the flag as <code>picoCTF{flag}</code></li> </ol>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_1/#2warm-todo","title":"2Warm - todo","text":"<p>try using an interactive Python shell to solve this</p> Walkthrough","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_1/#warmedup-todo","title":"WarmedUp - todo","text":"<p>try using cyberchef to solve this</p> Walkthrough","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_1/#problem-set-2","title":"Problem Set 2","text":"","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_1/#obedient-cat","title":"Obedient Cat","text":"<p>Learn how to use the cat command.</p> Walkthrough <p>Using a Linux shell</p> <pre><code>wget 'https://mercury.picoctf.net/static/fb851c1858cc762bd4eed569013d7f00/flag'\nfile flag\ncat flag\n</code></pre>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_1/#wave-a-flag","title":"wave a flag","text":"<p>skill: working with executable files in linux shell</p> <p>Hints</p> <ol> <li>how do you make a file executable in linux?</li> <li>-h is usually a good way to try asking for help</li> </ol> Walkthrough <pre><code># get the file and save locally\nwget 'https://mercury.picoctf.net/static/a00f554b16385d9970dae424f66ee1ab/warm'\n# make the file executable\nchmod +x warm\n./warm -h\n</code></pre>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_1/#convertmepy","title":"convertme.py","text":"Walkthrough <pre><code>From_Decimal('Space',false)\nTo_Binary('Space',8)\n</code></pre>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_1/#whats-a-net-cat","title":"what's a net cat?","text":"Walkthrough <pre><code>man nc\n</code></pre>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/","title":"General skills in CTF II","text":"","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#problem-set-1","title":"Problem set 1","text":"","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#nice-netcat","title":"Nice netcat","text":"Walkthrough <ol> <li>Open up a terminal, you can use the picoctf webshell, and copy the output</li> </ol> <pre><code>nc mercury.picoctf.net 22902\n</code></pre> <ol> <li>We need to decode the output, try this recipie</li> </ol> <pre><code>From_Decimal('Space',true)\n</code></pre>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#tab-tab-attack","title":"Tab tab attack","text":"<p>hint: in title - use tab complete</p> Walkthrough <p>Intended solution is to  <code>cd A&lt;tab&gt;</code> and keep tabbing</p> <p>We can also just do a ls -R</p> <pre><code>wget https://mercury.picoctf.net/static/3afd18a65e42b80526aa87f9766c588b/Addadshashanammu.zip\nunzip A&lt;tab&gt;\ncd &lt;tab&gt;\n\ncat or execute the file\n</code></pre>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#python-wrangling","title":"Python Wrangling","text":"<p>hint: this mainly tests your ability to execute a python file</p> Walkthrough <ol> <li>First lets make a clean directory to work in, but lets try out a little shell script to copy paste this in and run     <pre><code>newdir='py_wrangling'\ncd ~\nmkdir $newdir\ncd $newdir\n</code></pre></li> <li>get all three files      <pre><code>wget https://mercury.picoctf.net/static/1b247b1631eb377d9392bfa4871b2eb1/ende.py\nwget https://mercury.picoctf.net/static/1b247b1631eb377d9392bfa4871b2eb1/pw.txt\nwget https://mercury.picoctf.net/static/1b247b1631eb377d9392bfa4871b2eb1/flag.txt.en\n</code></pre></li> <li>Lets ahve a look at the script first     <pre><code>nano ende.py\n</code></pre><ul> <li>Looking over the source we get a good idea what it does. And looking at the <code>print()</code> syntax, it is python3</li> <li>To exit nano use <code>CTRL + 'x'</code></li> </ul> </li> <li>Now we know the file looks safe, Lets run the python     <pre><code>python3 ./ende.py\n</code></pre><ul> <li>It is pretty basic - but looks like from reviewing the code we need to pass it an argument</li> </ul> </li> <li>cat the password file - we may need this     <pre><code>cat pw.txt\n</code></pre></li> <li>execute the script to see the args     <pre><code>python3 ./ende.py -d ./flag.txt.en\n</code></pre><ul> <li>It asks for a password, copy the one we cat' out, and paste</li> </ul> </li> <li>You should have a flag!</li> </ol>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#magikarp-ground-mission","title":"Magikarp Ground Mission","text":"<p>An exercise in finding your way around the lInux file system.</p> Walkthrough <ol> <li>Run the container</li> <li>ssh into the container - the command is given and will be something like     <pre><code>ssh ctf-player@venus.picoctf.net -p 51614\n</code></pre></li> <li>Use the following commands      <pre><code>ls\ncat\n</code></pre></li> <li>Cat out what we see in our home directory     <pre><code>ls\ncat 1of3.flag.txt \ncat \n</code></pre></li> <li>The instructions tell us to go to root <code>/</code> <pre><code>cd /\nls\ncat 2of3.flag.txt\ncat instructions-to-3of3.txt\n</code></pre></li> <li>The instructions tell us to go home ! The common abbreviation of our home is <code>~</code> <pre><code>cd ~\nls\ncat 3of3.flag.txt\n</code></pre></li> <li>Piece together your flag componets for the flag</li> <li>Or... Lets script a whole flag     <pre><code>cat ~/drop-in/1of3.flag.txt /2of3.flag.txt ~/3of3.flag.txt | tr -d \"\\n\"\n</code></pre></li> </ol>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#problem-set-2","title":"Problem set 2","text":"","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#first-grep-todo","title":"First Grep - todo","text":"","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#first-find","title":"First find","text":"<p>hint</p> <pre><code>man find \n/iname\n</code></pre> Walkthrough <ol> <li>Open up a terminal, you can use the picoctf webshell, and copy the output</li> </ol> <pre><code>nc mercury.picoctf.net 22902\n</code></pre> <ol> <li>We need to decode the output, try this recipie</li> </ol> <pre><code>wget &lt;&gt;\nfind -iname ''\n</code></pre>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#big-zip-todo","title":"Big Zip - todo","text":"","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#problems-set-3","title":"Problems set 3","text":"","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#static-aint-always-noise","title":"Static ain't always noise","text":"<p>Hints</p> <ul> <li><code>BASH</code> is mentioned - you know this is going to need a Linux terminal</li> <li>Download the files</li> <li>Examine what the files are</li> <li>Follow the instructions</li> </ul> <p>Make sure you are working in a Linux terminal.</p> <p>This challenge relies on terminal skills allot. </p> Walkthrough <ul> <li>First lets make a clean directory to work in <pre><code>mkdir static\ncd static\n</code></pre></li> <li>lets download the files we need <pre><code>wget https://mercury.picoctf.net/static/ff4e569d6b49b92d090796d4631a2577/ltdis.sh\n\nwget https://mercury.picoctf.net/static/ff4e569d6b49b92d090796d4631a2577/static\n</code></pre></li> <li>lets have a look at the shell script <pre><code>cat ltdis.sh\n</code></pre></li> <li>Ok looks like it will analyse an executable. Lets check what <code>static</code> is  <pre><code>file static\n</code></pre></li> <li>Ah - it is an executable file - we can tell that because the output says      <code>ELF 64-bit LSB pie executable</code></li> <li>Ok lets make that shell script executable, otherwise we cannot run it <pre><code>chmod +x ltdis.sh\n</code></pre></li> <li>Now just check the permissions, looking for rwx (read write execute) <pre><code>ls -lah\n</code></pre></li> <li>Ok, lets run the shell script on that file <pre><code>./ltdis.sh static\n</code></pre></li> <li>lets check what it made, lets try out the common alias for <code>ls -lah</code> <pre><code>ll\n</code></pre></li> <li>Ok we can see two new files, lets examioine their contents, strings is always anice place to start  <pre><code>cat static.ltdis.strings.txt\n</code></pre></li> <li>What if this file was massive, Lets up the flag hunting... <pre><code>grep -i picoctf static.ltdis.strings.txt\n</code></pre></li> <li>Submit the flag!</li> <li>Tidy up - lets go back to our main home directory <pre><code>cd ~\n</code></pre></li> </ul> <p>Reflection</p> <p>Why not just run the executable?</p>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#strings-it","title":"strings it","text":"<ul> <li>Use the linux terminal</li> <li>Download the file</li> <li>Look at the challenge namesake</li> </ul> Walkthrough <ul> <li>First lets make a clean directory to work in <pre><code>mkdir strings\ncd strings\n</code></pre></li> <li>lets download the files we need <pre><code>wget https://jupiter.challenges.picoctf.org/static/5bd86036f013ac3b9c958499adf3e2e2/strings\n</code></pre></li> <li>looks lik it downloaded ok. Lets check what this file is <pre><code>file strings\n</code></pre></li> <li>Another ELF!</li> <li>Last cahllenge used strings, lets do that.. <pre><code>strings strings\n</code></pre></li> <li>Bleh, thats allot of text, lets try grep again, and pipe the output into it <pre><code>    strings strings | grep -i picoctf\n</code></pre></li> <li>That was easier! Ok, submit the flag and tidy up <pre><code>cd ~\n</code></pre></li> </ul> <ul> <li>How could they stop us using <code>grep</code> for the flag?</li> <li>Are there other ways to solve this?</li> </ul>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_general_2/#plumbing","title":"plumbing","text":"Walkthrough <ul> <li>First lets make a clean directory to work in, but lets try out a little shell script to copy paste this in and run <pre><code>newdir='plumbing'\ncd ~\nmkdir $newdir\ncd $newdir\n</code></pre></li> <li>If you did nice netcat this should sound familiar <pre><code>nc jupiter.challenges.picoctf.org 7480\n</code></pre></li> <li>Ok it is sending us back a heap of text, just press enter and you will be back out of the connection</li> <li>Lets try sending that output to a file usin  <pre><code>nc jupiter.challenges.picoctf.org 7480 &gt;&gt; out.txt\n</code></pre></li> <li>Lets try the grep trick <pre><code>grep -i picoctf out.txt\n</code></pre></li> <li>Lets see if we can just pipe straight to grep too <pre><code>nc jupiter.challenges.picoctf.org 7480 | grep -i picoctf\n</code></pre></li> <li>That was actually a bit nicer, submit the flag and go home (thats what <code>~</code> means) <pre><code>cd ~\n</code></pre></li> </ul> <p>Reflection</p> <ul> <li>Pipes connect an output of one thing, to the input of another</li> </ul>","tags":["picoCTF","general"]},{"location":"labs/picoctf/pico_playlist_python/","title":"Pico playlist python","text":"","tags":["picoCTF","python"]},{"location":"labs/picoctf/pico_playlist_python/#crackmes","title":"Crackmes","text":"<p>An introduction to using Python and reverse engineering. Understanding:</p> <ul> <li>Python</li> <li>how software works</li> <li>its secrets/flaws</li> </ul> <p>We will use the Python playlist</p>","tags":["picoCTF","python"]},{"location":"labs/picoctf/pico_playlist_python/#problem-set-1","title":"Problem set 1","text":"","tags":["picoCTF","python"]},{"location":"labs/picoctf/pico_playlist_python/#problem-set-2","title":"Problem set 2","text":"","tags":["picoCTF","python"]},{"location":"labs/picoctf/pico_playlist_python/#pw-crack-1","title":"PW Crack 1","text":"Walkthrough <ol> <li>First lets make a clean directory to work in, but lets try out a little shell script to copy paste this in and run     <pre><code>cd ~/\nnewdir='pw_crack1'\ncd ~\nmkdir ~/$newdir\ncd $newdir\n</code></pre></li> <li>Now lets grab the files     <pre><code>wget https://artifacts.picoctf.net/c/12/level1.py\nwget https://artifacts.picoctf.net/c/12/level1.flag.txt.enc\n</code></pre></li> <li>ok - take a look at the python     <pre><code>nano level2.py\n</code></pre></li> </ol>","tags":["picoCTF","python"]},{"location":"labs/picoctf/pico_playlist_python/#pw-crack-2","title":"PW Crack 2","text":"Walkthrough <ol> <li>First lets make a clean directory to work in, but lets try out a little shell script to copy paste this in and run     <pre><code>newdir='pw_crack2'\ncd ~\nmkdir $newdir\ncd $newdir\n</code></pre></li> <li>Now lets grab the files     <pre><code>wget https://artifacts.picoctf.net/c/14/level2.py\nwget https://artifacts.picoctf.net/c/14/level2.flag.txt.enc \n</code></pre></li> <li>ok - take a look at the python     <pre><code>nano level2.py\n</code></pre> <pre><code>### THIS FUNCTION WILL NOT HELP YOU FIND THE FLAG --LT ########################\ndef str_xor(secret, key):\n    #extend key to secret length\n    new_key = key\n    i = 0\n    while len(new_key) &lt; len(secret):\n        new_key = new_key + key[i]\n        i = (i + 1) % len(key)        \n    return \"\".join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c,new_key_c) in zip(secret,new_key)])\n###############################################################################\n\nflag_enc = open('level2.flag.txt.enc', 'rb').read()\n\ndef level_2_pw_check():\n    user_pw = input(\"Please enter correct password for flag: \")\n    if( user_pw == chr(0x34) + chr(0x65) + chr(0x63) + chr(0x39) ):\n        print(\"Welcome back... your flag, user:\")\n        decryption = str_xor(flag_enc.decode(), user_pw)\n        print(decryption)\n        return\n    print(\"That password is incorrect\")\n</code></pre></li> <li>Does chr() function call look familiar?</li> <li>Lets use python to solve this one. First start a python interpreter     <pre><code>python3\n</code></pre></li> <li>Now lets evaluate user_pw from the check <code>==</code> and print it     <pre><code>user_pw = chr(0x34) + chr(0x65) + chr(0x63) + chr(0x39)\nprint(user_pw)\n</code></pre></li> <li>Remember to exit the interpreter     <pre><code>exit()\n</code></pre></li> <li>Now call the function, enter the password, and copy out the flag!     <pre><code>python3 ./level2.py\n</code></pre></li> </ol>","tags":["picoCTF","python"]},{"location":"labs/picoctf/pico_playlist_python/#pw-crack-3","title":"PW Crack 3","text":"Walkthrough <ol> <li>Lets start scripting the setup...     <pre><code>cd ~\nnewdir='pw_crack3'\ncd ~\nmkdir ~/$newdir\ncd $newdir\nwget https://artifacts.picoctf.net/c/18/level3.py\nwget https://artifacts.picoctf.net/c/18/level3.flag.txt.enc\nwget https://artifacts.picoctf.net/c/18/level3.hash.bin \n</code></pre></li> <li>ok - take a look at the python</li> <li>Lets modify it to brute force the key</li> </ol> <p><pre><code>import hashlib\n\n### THIS FUNCTION WILL NOT HELP YOU FIND THE FLAG --LT ########################\ndef str_xor(secret, key):\n    #extend key to secret length\n    new_key = key\n    i = 0\n    while len(new_key) &lt; len(secret):\n        new_key = new_key + key[i]\n        i = (i + 1) % len(key)        \n    return \"\".join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c,new_key_&gt;\n###############################################################################\n\nflag_enc = open('level3.flag.txt.enc', 'rb').read()\ncorrect_pw_hash = open('level3.hash.bin', 'rb').read()\n\n\ndef hash_pw(pw_str):\n    pw_bytes = bytearray()\n    pw_bytes.extend(pw_str.encode())\n    m = hashlib.md5()\n    m.update(pw_bytes)\n    return m.digest()\n\n\ndef level_3_pw_check():\n    user_pw = input(\"Please enter correct password for flag: \")\n    user_pw_hash = hash_pw(user_pw)\n\n    if( user_pw_hash == correct_pw_hash ):\n        print(\"Welcome back... your flag, user:\")\n        decryption = str_xor(flag_enc.decode(), user_pw)\n        print(decryption)\n        return\n    print(\"That password is incorrect\")\n\n# The strings below are 7 possibilities for the correct password. \n#   (Only 1 is correct)\npos_pw_list = [\"8799\", \"d3ab\", \"1ea2\", \"acaf\", \"2295\", \"a9de\", \"6f3d\"]\n\n\nfor p in pos_pw_list:\n    user_hash = hash_pw(p)\n    if(user_hash ==  correct_pw_hash):\n        decryption = str_xor(flag_enc.decode(), p)\n        print(decryption)\n        exit()\n# level_3_pw_check()\n</code></pre> 1. You can experiment with chat GPT to solve it, but you need to be very clear waht you are asking of it, so really need to know the solution in your mind, and jsut ask chatGPT to get the syntax</p>","tags":["picoCTF","python"]},{"location":"labs/picoctf/pico_playlist_python/#extension","title":"Extension","text":"","tags":["picoCTF","python"]},{"location":"labs/picoctf/pico_playlist_python/#classic-crackme-0x100-todo","title":"Classic Crackme 0x100 - todo","text":"Walkthrough <ol> <li>Lets start scripting the setup...     <pre><code>cd ~\nnewdir='classic_crackme'\ncd ~\nmkdir ~/$newdir\ncd $newdir\nwget https://artifacts.picoctf.net/c_titan/107/crackme100\n</code></pre></li> <li>File shows its an ELF</li> <li>nc - we get prompted for a secret password <pre><code>nc titan.picoctf.net 61096\n</code></pre></li> </ol>","tags":["picoCTF","python"]},{"location":"labs/picoctf/pico_re/","title":"PicoCTF Reverse Engineering","text":"<p>These labs demonstrate basic assembly language understanding.</p>","tags":["picoCTF","re"]},{"location":"labs/picoctf/pico_re/#bit-o-asm-1","title":"Bit-O-Asm-1","text":"<p>What is in the <code>eax</code> register?</p> <pre><code>&lt;+0&gt;:     endbr64 \n&lt;+4&gt;:     push   rbp\n&lt;+5&gt;:     mov    rbp,rsp\n&lt;+8&gt;:     mov    DWORD PTR [rbp-0x4],edi\n&lt;+11&gt;:    mov    QWORD PTR [rbp-0x10],rsi\n&lt;+15&gt;:    mov    eax,0x30\n&lt;+20&gt;:    pop    rbp\n&lt;+21&gt;:    ret\n</code></pre>  Walkthrough <ol> <li>Look for <code>eax</code></li> <li>Notice that it is next to a <code>mov &lt;dst&gt;, &lt;src&gt;</code> instruction</li> <li>We can see a hex value is moved into eax</li> <li>Convert the hex value to decimal</li> </ol> <pre><code>&lt;+0&gt;:     endbr64 \n&lt;+4&gt;:     push   rbp\n&lt;+5&gt;:     mov    rbp,rsp\n&lt;+8&gt;:     mov    DWORD PTR [rbp-0x4],edi\n&lt;+11&gt;:    mov    QWORD PTR [rbp-0x10],rsi\n&lt;+15&gt;:    mov    eax,0x30     // this is the line of interest\n&lt;+20&gt;:    pop    rbp\n&lt;+21&gt;:    ret\n</code></pre>","tags":["picoCTF","re"]},{"location":"labs/picoctf/pico_re/#bit-o-asm-2","title":"Bit-O-Asm-2","text":"<pre><code>&lt;+0&gt;:     endbr64 \n&lt;+4&gt;:     push   rbp\n&lt;+5&gt;:     mov    rbp,rsp\n&lt;+8&gt;:     mov    DWORD PTR [rbp-0x14],edi\n&lt;+11&gt;:    mov    QWORD PTR [rbp-0x20],rsi\n&lt;+15&gt;:    mov    DWORD PTR [rbp-0x4],0x9fe1a // set value at memory location\n&lt;+22&gt;:    mov    eax,DWORD PTR [rbp-0x4]  // move value at memory location into eax\n&lt;+25&gt;:    pop    rbp\n&lt;+26&gt;:    ret\n</code></pre>  Walkthrough <ol> <li>Look for <code>eax</code></li> <li>Notice that it is next to a <code>mov &lt;dst&gt;, &lt;src&gt;</code> instruction</li> <li>Notice the src is a memory address, but more specifically the value at a memory address <code>rbp-0x4</code></li> <li>So we look to where that value is set, which is the prior <code>mov</code> instruction</li> <li>Grab the hex value and convert to decimal</li> </ol> <pre><code>&lt;+0&gt;:     endbr64 \n&lt;+4&gt;:     push   rbp\n&lt;+5&gt;:     mov    rbp,rsp\n&lt;+8&gt;:     mov    DWORD PTR [rbp-0x14],edi\n&lt;+11&gt;:    mov    QWORD PTR [rbp-0x20],rsi\n&lt;+15&gt;:    mov    DWORD PTR [rbp-0x4],0x9fe1a\n&lt;+22&gt;:    mov    eax,DWORD PTR [rbp-0x4]      //9fe1a\n&lt;+25&gt;:    pop    rbp\n&lt;+26&gt;:    ret\n</code></pre>","tags":["picoCTF","re"]},{"location":"labs/picoctf/pico_re/#bit-o-asm-3","title":"Bit-O-Asm-3","text":"<pre><code>&lt;+0&gt;:     endbr64 \n&lt;+4&gt;:     push   rbp\n&lt;+5&gt;:     mov    rbp,rsp\n&lt;+8&gt;:     mov    DWORD PTR [rbp-0x14],edi\n&lt;+11&gt;:    mov    QWORD PTR [rbp-0x20],rsi\n&lt;+15&gt;:    mov    DWORD PTR [rbp-0xc],0x9fe1a\n&lt;+22&gt;:    mov    DWORD PTR [rbp-0x8],0x4\n&lt;+29&gt;:    mov    eax,DWORD PTR [rbp-0xc]\n&lt;+32&gt;:    imul   eax,DWORD PTR [rbp-0x8]\n&lt;+36&gt;:    add    eax,0x1f5\n&lt;+41&gt;:    mov    DWORD PTR [rbp-0x4],eax\n&lt;+44&gt;:    mov    eax,DWORD PTR [rbp-0x4]\n&lt;+47&gt;:    pop    rbp\n&lt;+48&gt;:    ret\n</code></pre>  Walkthrough <ol> <li>Track the value of eax back up through the instructions</li> <li>notice the instructions are not all <code>mov</code>!</li> </ol> <pre><code>&lt;+0&gt;:     endbr64 \n&lt;+4&gt;:     push   rbp\n&lt;+5&gt;:     mov    rbp,rsp\n&lt;+8&gt;:     mov    DWORD PTR [rbp-0x14],edi\n&lt;+11&gt;:    mov    QWORD PTR [rbp-0x20],rsi\n&lt;+15&gt;:    mov    DWORD PTR [rbp-0xc],0x9fe1a // used at &lt;+29&gt;\n&lt;+22&gt;:    mov    DWORD PTR [rbp-0x8],0x4    // used at &lt;+32&gt;\n&lt;+29&gt;:    mov    eax,DWORD PTR [rbp-0xc] // eax = 0x9fe1a\n&lt;+32&gt;:    imul   eax,DWORD PTR [rbp-0x8] // eax = 0x9fe1a * 0x4 = 0x27f868   \n&lt;+36&gt;:    add    eax,0x1f5               // eax =  0x27f868 + 0x1f5  = \n&lt;+41&gt;:    mov    DWORD PTR [rbp-0x4],eax // value at eax moved into rbp-0x4\n&lt;+44&gt;:    mov    eax,DWORD PTR [rbp-0x4] // value at rbp-0x4 moved into eax\n&lt;+47&gt;:    pop    rbp\n&lt;+48&gt;:    ret\n</code></pre> <p>Enter the interactive python by running the command <code>python3</code>. You can run some code like:</p> <pre><code>a = 0x9fe1a\nb = 0x4\nc = 0x1f5\nans = (a*b)+c\nprint(f'picoCTF{{{ans}}}')\n# you have the answer!\n</code></pre>","tags":["picoCTF","re"]},{"location":"labs/web/directory_traversal/","title":"Directory Traversal","text":"<p> An application does not sanitise user input, specifically when controlling the read of a file, allowing a user to read arbitrary files through the web session.</p> <p> Remember:</p> <ul> <li>a computer filesystem is like a filing system, with things in paths</li> <li>a web application is a program running from a particular location.</li> </ul>","tags":["picoCTF","web-exploitation","difficulty::medium"]},{"location":"labs/web/directory_traversal/#picoctf-forbidden-paths","title":"PicoCTF - Forbidden Paths","text":"<p>This one is a straight forward demonstration of a directory traversal vulnerability.</p>","tags":["picoCTF","web-exploitation","difficulty::medium"]},{"location":"labs/web/directory_traversal/#reading-the-challenge-hints","title":"Reading the challenge hints","text":"<ul> <li>name tells us it is about paths</li> <li>website is filtering absolute file paths</li> <li>absolute is like <code>/root/flag.txt</code></li> <li>relative is like <code>../../../root/flag.txt</code> i.e. relative to where we are in present working directory</li> </ul>","tags":["picoCTF","web-exploitation","difficulty::medium"]},{"location":"labs/web/directory_traversal/#understanding-what-the-hint-means","title":"Understanding what the hint means","text":"<ol> <li>Read the challenge well. It tells you<ol> <li>Where the website is served from <code>/usr/share/nginx/html/</code></li> <li>The filename and location of the flag at <code>/flag.txt</code>.</li> </ol> </li> <li>This gives us a good hint it is looking for a directory traversal attack</li> </ol> <p>So if we have shell this looks like:</p> <pre><code>$ pwd\n/usr/share/nginx/html/\n</code></pre> <p>We need to move from there using a relative path. For example:</p> <pre><code>$ pwd ../../\n/usr/share/\n</code></pre> <p>Now try and get flag!</p>","tags":["picoCTF","web-exploitation","difficulty::medium"]},{"location":"labs/web/directory_traversal/#walkthrough","title":"Walkthrough","text":"Walkthrough <ol> <li>Launch the instance and open up the <code>website</code></li> <li>Remember:<ol> <li>to move up a directory use <code>../</code></li> <li>you cannot move too high, the right number up directories is functionlly the same as too many</li> </ol> </li> <li>Look at the path - this is a linux system, not Windows<ol> <li>Even try <code>../../../../etc/passwd</code></li> </ol> </li> <li>Now try for the flag</li> </ol>","tags":["picoCTF","web-exploitation","difficulty::medium"]},{"location":"labs/web/n0s4n1ty_1/","title":"n0s4n1ty 1","text":"<p>\"A developer has added profile picture upload functionality to a website. However, the implementation is flawed, and it presents an opportunity for you. Your mission, should you choose to accept it, is to navigate to the provided web page and locate the file upload area. Your ultimate goal is to find the hidden flag located in the /root directory.\"</p>","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/n0s4n1ty_1/#reading-the-challenge-hints","title":"Reading the challenge hints","text":"<ul> <li>no sanity; likely no input sanitisation</li> <li>focus is the upload functionality</li> <li>difficulty of the challenge is basic; so don't expect this to be too complex</li> <li>process we are given to follow:<ol> <li>locate file upload area</li> <li>Find flag in <code>/root</code></li> </ol> </li> </ul>","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/n0s4n1ty_1/#research","title":"Research","text":"<ul> <li>LMGTFY</li> <li>likely hit</li> </ul> <p>So maybe the site may not check file upload type, and allow us to upload executable content to the server</p> <p>Security practice tip!</p> <p>A secure web server will check file extension and file type and block unapproved types!.</p>","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/n0s4n1ty_1/#testing-the-idea","title":"Testing the idea","text":"","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/n0s4n1ty_1/#test-a-file-upload-of-a-txt-file","title":"Test a file upload of a txt file","text":"<p>Create a php file to test our theory with content like the following. Save it with a <code>.php</code> expension</p> <pre><code>&lt;?php\n// Get the current working directory\n$currentDirectory = getcwd();\n// Display the current working directory\necho \"The present working directory is: \" . $currentDirectory;\n?&gt;\n</code></pre> <p>Response looks good! <code>The file cwd.php has been uploaded Path: uploads/cwd.php</code></p> <p>Now browse there... Success! It printed our working directory - we have code execution in the context of the web server!</p> <p>This looks something like the following:</p> <pre><code>sequenceDiagram\n    client-&gt;&gt;server: uploads file\n    server-&gt;&gt;client: ok, and heres where it went!\n    client-)server: can i see my file pls?\n    server--&gt;&gt;client: sure!\n    server--&gt;&gt;client: its executable, ok i will execute it...\n    server-&gt;&gt;client: here's my response\n</code></pre>","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/n0s4n1ty_1/#now-can-we-just-list-root","title":"Now can we just list /root?","text":"<p>Lets mak a php script to list a directory; from bing ai code generator:</p> <pre><code>&lt;?php\n$directory = '/root';\nforeach (new DirectoryIterator($directory) as $fileInfo) {\n    if (!$fileInfo-&gt;isDot()) {\n        echo $fileInfo-&gt;getFilename() . PHP_EOL;\n    }\n}\n?&gt;\n</code></pre> <p>Hmm, no permissions</p>","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/n0s4n1ty_1/#ok-sudo-list-me-root","title":"Ok sudo list me root","text":"<p>Lets try this as a system call...with sudo.</p> <p>Security practice tip!</p> <p>A secure web server will block system calls in the php config.</p> <p>Security practice tip!</p> <p>For sudo to work, the web server user will have been added to sudoers. That is not normal. If not, we would need some means to privilege escalate</p> <pre><code>&lt;?php\nsystem('sudo ls -l /root'); // Replace 'ls -l' with your desired command\n?&gt;\n</code></pre> <p>Success!</p> <p>Ok now try and get the contents of the flag yourself!</p>","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/pecan_web/","title":"Pecan web","text":"","tags":["pecan","web-exploitation"]},{"location":"labs/web/pecan_web/#bite-my-shiny-metal","title":"Bite my shiny metal...","text":"<p>Finding files we can read but are not directly linked...</p> Walkthrough <ol> <li>Inspect the page</li> <li>Look at where the image is being served from </li> <li><code>Can you find the file</code> ok lets do that...</li> <li>Can we do directory listing img source ...</li> <li>Can we brute force ...</li> </ol> <pre><code># check the help\ngobuster help dir\n\n# build the brute\ngobuster dir -u https://pecanplus.ecusdf.org/challenges/bite_my_shiny_metal -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -s 200 -b ''\n</code></pre> <ol> <li>Did you find any files?</li> </ol>","tags":["pecan","web-exploitation"]},{"location":"labs/web/pecan_web/#lamb-source-1","title":"Lamb Source 1","text":"<p>An exercise in reading page source... sauce hehe</p> Walkthrough <ol> <li> <p>Load the challenge page</p> </li> <li> <p>Inspect the source for the page...</p> </li> </ol>","tags":["pecan","web-exploitation"]},{"location":"labs/web/pecan_web/#mr-robot","title":"Mr Robot","text":"<p>Find a file...</p> Walkthrough <ol> <li> <p>Load source and notice working directory is <code>challenges/mr_robot/</code></p> </li> <li> <p>Can we dir list... https://pecanplus.ecusdf.org/challenges/mr_robot</p> </li> <li> <p>lets try a gobuster</p> </li> </ol> <pre><code>gobuster dir -u https://pecanplus.ecusdf.org/challenges/mr_robot -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -s 200 -b ''\n</code></pre> <ol> <li> <p>Of course .. robots</p> </li> <li> <p>Go to the restricted page</p> </li> <li> <p>inspect source</p> </li> <li> <p>Go to the newly found page</p> </li> <li> <p>flag!</p> </li> </ol>","tags":["pecan","web-exploitation"]},{"location":"labs/web/pico_web_client/","title":"Pico web client","text":"","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/pico_web_client/#resources","title":"Resources","text":"","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/pico_web_client/#developer-tools-documentation","title":"Developer tools documentation","text":"<ul> <li>Firefox</li> <li>Edge</li> </ul>","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/pico_web_client/#where-are-the-robots","title":"where are the robots","text":"<p>An introduction to robots instructions.</p> Walkthrough <ol> <li>Load the site</li> <li>Ok it is a pretty simple site, lets have alook at the source to see if there is any more to it <pre><code>CTRL+SHIFT+i\n</code></pre></li> <li>Yes - this confirms very simple site - so the challenge will probably be realted to the namesake.</li> <li>We know about <code>robots.txt</code> - lets visit it</li> <li>just add <code>\\robots.txt</code> to the url...</li> <li>Interesting - we have a Disallow what does that mean? <pre><code>disallow: [At least one or more disallow or allow entries per rule] A directory or page, relative to the root domain, \nthat you don't want the user agent to crawl. If the rule refers to a page, it must be the full page name as shown in the browser. \nIt must start with a / character and if it refers to a directory, it must end with the / mark.\n</code></pre></li> <li>Ok - the developer wants to hide that directory, so lets go there </li> <li>Did you find a flag?</li> </ol>","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/pico_web_client/#power-cookie","title":"Power Cookie","text":"<p>This one is a good introduction to cookies</p> Walkthrough <ol> <li>Start the instance, and opena browser to the link given</li> <li>Open up your dev tools <pre><code>CTRL+SHIFT+i\n</code></pre></li> <li>Navigate over to the <code>Application</code> tab and open up <code>Storage -&gt; Cookies</code></li> <li>Look at the cookies for the site</li> </ol> <p></p> <ol> <li>notice the cookei <code>isAdmin</code> waht is its value? (<code>0</code>)</li> <li>Try changing the value, right click on the value and select <code>Edit \"Value\"</code></li> <li>When you have changed the value, reload the page by hitting <code>F5</code></li> </ol>","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/pico_web_client/#insp3ct0r","title":"Insp3ct0r","text":"<p>You are now in a position to solve this </p> Walkthrough <ol> <li>Start the instance, and opena browser to the link given</li> <li>Open up your dev tools <pre><code>CTRL+SHIFT+i\n</code></pre></li> <li>Navigate over to the <code>Sources</code> tab and explore</li> </ol>","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/pico_web_client/#cookies","title":"Cookies","text":"<p>A bit of a step up, but helps understand cookies and their role.</p> Walkthrough <ol> <li>First we need to load the site</li> <li>OPen up developer mode <pre><code>CTRL+SHIFT+i\n</code></pre></li> <li>Navigate over to the <code>Application</code> tab and open up <code>Storage -&gt; Cookies</code></li> </ol> <p></p> <ol> <li>We can see the <code>Name</code> and <code>Value</code> pairs - note that text content is stored in base64</li> <li>There is only one cookie on this site named <code>name</code> - look at the value (<code>-1</code>)</li> <li>Enter <code>snickerdoodle</code> in the <code>search</code> field</li> <li>Observe the cookie value now (<code>0</code>)</li> <li>Lets see what happens when we edit the value. In the developer window, right click on the value and select <code>Edit \"Value\"</code></li> <li>Change it to <code>1</code> and reload the page using <code>f5</code></li> <li>The maximum value is 28 - see if you can find the right value...</li> </ol> Lazy? Walkthrough Extension <pre><code>write python3 to connect to the website \"http://mercury.picoctf.net:27177/check\" \nand supply a cookie named \"name\" the values from 0-28 in a loop and print the result\n</code></pre> <p>Some working code to solve this</p>","tags":["picoCTF","web-exploitation"]},{"location":"labs/web/sqli/","title":"SQL Injection","text":"<p>Not effectively sanitising user input before passing them to a database query.</p> <pre><code>SELECT * FROM users WHERE user_name='admin' AND password='password'\n</code></pre> <p>Common  SQLi</p> <pre><code>admin' OR 1=1 -- //\n</code></pre>","tags":["picoCTF","web-exploitation","difficulty::medium"]},{"location":"labs/web/ssti/","title":"SSTI","text":"<p>Server Side Template Injection</p>","tags":["picoCTF","web-exploitation","difficulty::medium"]},{"location":"labs/web/ssti/#ssti-1","title":"SSTI 1","text":"","tags":["picoCTF","web-exploitation","difficulty::medium"]},{"location":"labs/web/ssti/#blurb","title":"Blurb","text":"<p>I made a cool website where you can announce whatever you want! Try it out! Additional details will be available after launching your challenge instance.</p>","tags":["picoCTF","web-exploitation","difficulty::medium"]},{"location":"labs/web/ssti/#solution","title":"Solution","text":"<p>nice write-up for SSTI 1</p>","tags":["picoCTF","web-exploitation","difficulty::medium"]},{"location":"lessons/01_intro/","title":"01 Welcome to PECAN training","text":"<p>Welcome to the first week of PECAN training. The aim of these training sessions is to get you ready to compete, but most importantly, you will learn some valuable skills along the way.</p>","tags":["lesson","ctf"]},{"location":"lessons/01_intro/#objectives","title":"Objectives","text":"<ol> <li>Why learn cyber security</li> <li>Ethical hacking</li> <li>Understand CTF</li> <li>set up hacking station</li> <li>set up pico ctf account</li> <li>pico playlist - general</li> </ol>","tags":["lesson","ctf"]},{"location":"lessons/01_intro/#about-cyber-security","title":"About cyber security","text":"<p>Our objective with these modules is to learn more about cyber security and have fun doing it!</p> <p>Cyber security typically involves the CIA of data:</p> <ol> <li>Confidentiality - my data can only been seen by those authorised.</li> <li>Integrity- my data can only be changed by those authorised.</li> <li>Availability - I can access my data when I need it.</li> </ol> <p>Different data types and uses typically vary in sensitivity across the three. For example, weather information may be available publically, but it causes major issues when it is unavailable. Whereas, the secret position of a Submarine could be missed for a bit, but undermines the safety of people if its confidentiality is broken.</p> <p>Participating in this series will give you some skills to protect your data, and an idea of what a career in cyber can include.</p> <p></p>","tags":["lesson","ctf"]},{"location":"lessons/01_intro/#ethical-hacking","title":"Ethical hacking","text":"<p>Hacking now refers to unauthorised computer access, this is colloquially known as blackhat hacking.  Breaking into computers is wrong (illegal) when not authorised.  For example, according to the Cybercrime Act 2001 parts 10.7</p> <p>``` 478.1  Unauthorised access to, or modification of, restricted data</p> <p>(1) A person is guilty of an offence if:</p> <pre><code>(a) the person causes any unauthorised access to, or modification of, restricted data; and\n\n(b) the person intends to cause the access or modification; and\n\n(c) the person knows that the access or modification is unauthorised; and\n\n(d) one or more of the following applies:\n\n    (i) the restricted data is held in a Commonwealth computer;\n\n    (ii) the restricted data is held on behalf of the Commonwealth;\n\n    (iii) the access to, or modification of, the restricted data is caused by means of a telecommunications service.\n</code></pre> <p>Penalty: 2 years imprisonment.</p> <p>(2) Absolute liability applies to paragraph (1)(d).</p> <p>(3) In this section:</p> <pre><code>restricted data means data:\n\n(a) held in a computer; and\n\n(b) to which access is restricted by an access control system associated with a function of the computer.\n</code></pre> <p>```</p> <p>However, without understanding how the systems are broken into, or testing the controls in place, we are struggling to defend our data as cyber security professionals. So with approprate approvals in place, that is you have written approval to exploit a security control(s), ethical hacking is the application of cyber dark arts to ensure we can protect our systems from those who wish to do them harm.</p> <p>You will learn some techniques that can be used in the hacking of systems. This is a privilige not to be abused.</p> <p></p>","tags":["lesson","ctf"]},{"location":"lessons/02_encoding/","title":"02 Character encoding","text":"","tags":["lesson","essential-skills"]},{"location":"lessons/02_encoding/#objectives","title":"Objectives","text":"<p>Work through the picoCTF general playlist to learn</p> <ol> <li>Binary and encoding </li> <li>Shell navigation and commands</li> <li>Python</li> </ol>","tags":["lesson","essential-skills"]},{"location":"lessons/02_encoding/#last-lesson-we-learnt","title":"Last lesson we learnt","text":"<ol> <li>Binary - a computer stores data in raw 0 and 1. <ul> <li>A single 0 or 1 is a bit</li> <li>8 is a byte</li> <li>1024 is a kilobyte</li> </ul> </li> <li>numeric representation in differnt number bases (2,10,16) - they all represent the exact same underlying binary value in the computer but look different.</li> <li>encoding - a means of using binary to store text values. There are differnt encoding schemes, the most common in English is ASCII (7bit) now superseded by UTF-8 (8 bit)</li> </ol>","tags":["lesson","essential-skills"]},{"location":"lessons/02_encoding/#lab","title":"Lab","text":"<p>Open up picoCTF and login</p> <p>Work through the general playlist</p> <p>Use the lab guides</p>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/","title":"03 Base64","text":"","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#objectives","title":"Objectives","text":"<ol> <li>Understand base64</li> <li>Finish off the general challenges in picoCTF</li> </ol>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#labs","title":"Labs","text":"<ol> <li>Finish off general playlist  Skills II problems 3 has nice walkthroughs!</li> <li>A simple base64 challenge bases</li> </ol>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#expected-base-knowledge","title":"Expected base knowledge","text":"<p>We need to be getting a good at these foundational skills: </p>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#computing-fundamentals","title":"Computing fundamentals","text":"<ol> <li>A computer stores information in binary </li> <li>Understanding number representation in computers</li> <li>Understanding the same number can be represented in different bases (binary, octal, decimal, hexadecimal)</li> <li>Familiar with basic charachter encding (ASCII, UTF-8)</li> </ol> <p>For more information:</p> <ul> <li>Number systems tutorial with Python</li> <li>What is charachter encoding</li> </ul>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#linux-terminal-skills","title":"Linux terminal skills","text":"<ol> <li>Navigating directories <code>ls, cd, mkdir, pwd</code></li> <li>Finding help <code>man man</code> or try <code>&lt;command&gt; -h</code></li> <li>Viewing content of a file <code>cat</code></li> <li>Viewing permissions <code>ls -la</code></li> <li>Changing permissions <code>chmod</code></li> <li>Downloading a file <code>wget</code></li> <li>Accessing another system <code>nc, ssh</code></li> <li>Examine file type <code>file</code></li> <li>Using tab to complete a line</li> <li>Using up arrow to load the last line(s) executed</li> </ol>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#cyberchef","title":"CyberChef","text":"<ol> <li>Load input</li> <li>Add recipies</li> <li>Load an existing recipie</li> </ol>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#python","title":"Python","text":"<ol> <li>Execute python</li> <li>Use the Python interactive shell</li> </ol>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#but-i-dont-feel-like-a-1337-hax0r","title":"But I dont feel like a 1337 hax0r?","text":"<p>If you need to strengthen your foundations:</p> <ol> <li>Watch the pico general skills video1 and video2</li> <li>Finish all the picoCTF general skills challenges</li> <li>Ask for help!!!</li> </ol>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#base64","title":"Base64","text":"<p>A binary to text encoding. That means it can stuff any sequence of bits into a text representation of those bits.</p> <p></p> <p>For more on the topic see this good write up.</p>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#why-it-exists","title":"Why it exists","text":"<p>To avoid the interpretation of bytes as instructions (special or control charachters) by a system/protocol handling the data.</p>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#why-know-it","title":"Why know it","text":"<p>Base64 is exceptionally common in challenges. </p>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#how-it-is-used","title":"How it is used","text":"<ol> <li>Email attachments are typically encoded - this was the first use case for base64</li> <li>It is used allot in web data transfers</li> <li>Storing binary data inside a text based system (like a web cookie)</li> </ol>","tags":["lesson","essential-skills"]},{"location":"lessons/03_base64/#some-tests","title":"Some tests","text":"<p>Try decoding <code>WW91IGFyZSBhd2Vzb21lIOKcqAo=</code></p> <p>With 1. CyberChef 1. ChatGPT</p> <p>Now - complete the lab bases</p>","tags":["lesson","essential-skills"]},{"location":"lessons/04_python/","title":"04 Python \ud83d\udc0d","text":"","tags":["lesson","essential-skills"]},{"location":"lessons/04_python/#objectives","title":"Objectives","text":"<ol> <li>Python fu ++</li> <li>Try out generative AI</li> <li>Continue building foundational skills</li> <li>Progress to Crackmes</li> </ol>","tags":["lesson","essential-skills"]},{"location":"lessons/04_python/#labs","title":"Labs","text":"<p>The labs are self paced - but you can ask for a run through!</p> <ol> <li>Finish off the general challenges in picoCTF<ul> <li>General 2-3</li> <li>it was common to have issues with python wrangling</li> <li>remember to use walkthroughs</li> </ul> </li> <li>Get into some crackmes</li> <li>Try out the PECAN Love letter</li> </ol> <p></p>","tags":["lesson","essential-skills"]},{"location":"lessons/04_python/#what-is-python","title":"What is Python","text":"<p>First appearing in 1991, it is now one of the most popular programming languages in the world.  Python is a mainstay in many developer communities. Particulalry in CTF's and Cyber Security.</p> <p>It is a high level language, with emphasis on code readability.</p>","tags":["lesson","essential-skills"]},{"location":"lessons/04_python/#critical-skills-for-python-in-ctfs","title":"Critical skills for Python in CTF's","text":"<ol> <li>Finding help</li> <li>Reading Python code</li> <li>Writing basic code</li> </ol>","tags":["lesson","essential-skills"]},{"location":"lessons/04_python/#reading-python","title":"Reading Python","text":"<p>If you download Python - have a look at it first. Its a good habit to do a basic traige - \"is this what I am expecting\" because plenty of malware gets distributed in dodgy code.</p> <p>You can view it in a terminal using either:</p> <pre><code># a quick basic view\ncat\n# or a nicer view with editing\nnano \n</code></pre>","tags":["lesson","essential-skills"]},{"location":"lessons/04_python/#writing-python","title":"Writing Python","text":"<p>As challenges progress you will need to start writing some Python to help. If you are familiar with Python, sue the tool you are familiar with</p> <p>In Kali we will have <code>LeafPad</code> gui editor - try it out too.</p>","tags":["lesson","essential-skills"]},{"location":"lessons/04_python/#help-in-the-interpreter","title":"Help in the interpreter","text":"<p>We have built in help - ok but often nicer online.</p> <pre><code>python3\nPython 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; help(chr)\n</code></pre>","tags":["lesson","essential-skills"]},{"location":"lessons/04_python/#help-online","title":"Help online","text":"<p>There are plenty of docs online</p>","tags":["lesson","essential-skills"]},{"location":"lessons/04_python/#help-using-ai","title":"Help using AI","text":"<p>This is going to be a great place to start learning.</p> <p>First a quick intro to AI</p> <p>\ud83d\udc27 Now ask ChatGPT what the following code does?</p> <pre><code>### THIS FUNCTION WILL NOT HELP YOU FIND THE FLAG --LT ########################\ndef str_xor(secret, key):\n    #extend key to secret length\n    new_key = key\n    i = 0\n    while len(new_key) &lt; len(secret):\n        new_key = new_key + key[i]\n        i = (i + 1) % len(key)        \n    return \"\".join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c,new_key_&gt;\n###############################################################################\n\n\nflag_enc = open('level1.flag.txt.enc', 'rb').read()\n\ndef level_1_pw_check():\n    user_pw = input(\"Please enter correct password for flag: \")\n    if( user_pw == \"8713\"):\n        print(\"Welcome back... your flag, user:\")\n        decryption = str_xor(flag_enc.decode(), user_pw)\n        print(decryption)\n        return\n    print(\"That password is incorrect\")\n\nlevel_1_pw_check()\n</code></pre> <p>\ud83d\udc27 Now try PW Crack 1</p>","tags":["lesson","essential-skills"]},{"location":"lessons/05_web_1/","title":"05 Web exploitation 1","text":"<p>An introduction to web exploitation covering:</p> <ol> <li>robots.txt</li> <li>cookies</li> </ol>","tags":["lesson","web-exploitation"]},{"location":"lessons/05_web_1/#labs","title":"Labs","text":"<ol> <li>Today focus on web hacking</li> </ol> <p>Foundation hacker skills...</p> <ol> <li>Python playlist</li> <li>Complete all in general 2</li> </ol>","tags":["lesson","web-exploitation"]},{"location":"lessons/05_web_1/#web-exploitation","title":"Web Exploitation","text":"<p>Visiting a web site through a browser started as just static sites like this one to share informatioon globally, but has grown now to the delivery of interactive applications, tracking, and advertising models.</p> <p>This extra functionality has significantly incrfeased the amount of complexity and code required for applications. Hence building a web site now is significantly abstracted from the underlying complexity.</p> <p>That means - to run a web service, one needs to trust a whole heap of people and their code that you do not know.</p> <p>Either accidentaly or deliberatly, the complexity and absrtaction, means that there is allot of vulnerabilities in web applications.</p> <p>Web hacking is presently a significant hacking vector.</p>","tags":["lesson","web-exploitation"]},{"location":"lessons/05_web_1/#how-the-web-works","title":"How the web works","text":"<p>First - think in terms of:</p> <ol> <li>A client - your computer and browser</li> <li>A server  - the remote system(s) serving the content</li> </ol> <p>When you request a web resource:</p> <ol> <li>Your computer resolves the human name (like <code>scbc.wa.edu.au</code>) to an IP address (DNS resoplution), and then establishes a connection to that server.</li> <li>Your browser makes a HTTP(s) request to that server. This is the primary web transport protocol.</li> <li>The server receives the request, processes it, and returns data based on the request.</li> <li>Your browser receives the data, and renders it in the browser.</li> </ol> <p>In the above, code is being run on both the client and server.</p>","tags":["lesson","web-exploitation"]},{"location":"lessons/05_web_1/#common-web-concepts","title":"Common web concepts","text":"","tags":["lesson","web-exploitation"]},{"location":"lessons/05_web_1/#web-server","title":"\ud83c\udf66 Web server","text":"<p>The web server will serve out a particualr directory contents from the filesystem. And it can execute code in the context of the web server.</p> <p>The web server will provide a service on a particualr port - typically 80 and 443</p>","tags":["lesson","web-exploitation"]},{"location":"lessons/05_web_1/#robots","title":"\ud83e\udd16 Robots","text":"<p>Search engines work by visiting all the web pages with a <code>bot</code> often called a \ud83d\udd77\ufe0f because they crawl the \ud83d\udd78\ufe0f. For example Googlebot.</p> <p>If you have information that you do not want appearing in global search engines - these can be excluded using the standard <code>robots.txt</code> file.</p> <p>Let look at this more in a lab</p>","tags":["lesson","web-exploitation"]},{"location":"lessons/05_web_1/#cookies","title":"\ud83c\udf6a Cookies","text":"<p>Cookies are little bits of data stored locally on your computer. There are differnt types</p> <p>There can be many of them associated with a site. Originally for maintining state for a website- they now are used allot to track web users for the purpose of advertising.</p> <p>One of the best resources about cookies</p>","tags":["lesson","web-exploitation"]},{"location":"lessons/05_web_1/#why","title":"Why","text":"<ol> <li>Session management</li> <li>Personalisation</li> <li>Tracking</li> </ol>","tags":["lesson","web-exploitation"]},{"location":"lessons/05_web_1/#types","title":"Types","text":"<p>Session Persistant Authentication Tracking</p> <p>First party - created by the website itself Third party - from a domain other than in the broser - great example is Facebook</p>","tags":["lesson","web-exploitation"]},{"location":"lessons/05_web_1/#tools","title":"Tools","text":"<p>Today - we will use the develoepr tools - they come with documetnation:</p> <ul> <li>Firefox</li> <li>Edge</li> </ul>","tags":["lesson","web-exploitation"]},{"location":"lessons/05_web_1/#resources","title":"Resources","text":"<ul> <li>How the web works</li> <li>CTF101 Web Exploitation</li> </ul>","tags":["lesson","web-exploitation"]},{"location":"lessons/06_web_2/","title":"06 Web exploitation 2","text":"<p>We have learned about thinking of things server side and client side with regards to web vulnerabilities and exploitation.</p> <p>Server side - means the vulenerability exists within how the server handles data we send to it.</p> <p>Client side - generally the vulnerability in how the browser handles the code</p> <p>This lesson covers:</p> <ol> <li>Directory traversal</li> <li>Local and remote file inclusion</li> <li>SQL injection</li> </ol>","tags":["lesson","web-exploitation"]},{"location":"lessons/06_web_2/#owasp","title":"OWASP","text":"<p>Publish the top ten and client side</p>","tags":["lesson","web-exploitation"]},{"location":"lessons/06_web_2/#directory-traversal","title":"Directory traversal","text":"<p>Really a form of local file inclusion, wherever we can insert a path into a web application, and have the application read the contents to us.</p> <p>Finding them is generally through testing of fields where we can supply user input. If we have source for the web application we can look for calls to render a file.</p> <p>CTF101 has a good write up</p>","tags":["lesson","web-exploitation"]},{"location":"lessons/06_web_2/#local-and-remote-file-inclusion","title":"local and remote file inclusion","text":"<p>The contents of the file will be included in the context of the web application - not great if that content is executable!</p> <ul> <li>local - the file is on the web server, maybe from an upload</li> <li>remote - the file is sourced over the network</li> </ul>","tags":["lesson","web-exploitation"]},{"location":"lessons/06_web_2/#sqli","title":"SQLi","text":"<p>CTF101 good explanation</p>","tags":["lesson","web-exploitation"]},{"location":"lessons/07_crypto_intro/","title":"07 Intro to cryptography","text":"<p>First, a good resource is crypto-it</p> <p>Cryptography is used to provide confidentiality and integrity of data.  There are a few broad cryto related concepts:</p>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#hashing","title":"Hashing","text":"<ul> <li>think of it as a uniq signature of a data blob</li> <li>a one way function </li> <li>results in a fixed length string for the algorithm</li> <li>always the same string for the same data blob</li> <li>used for integrity checking</li> </ul>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#encryption","title":"Encryption","text":"<ul> <li>a means of scrambling data to make it unrecoverable by those not intended to view it</li> <li>two way function - data can be recovered</li> <li>used for confidentaility and integrity</li> </ul>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#encoding","title":"Encoding","text":"<ul> <li>not a cipher or encryption</li> <li>intended to package data for transport</li> </ul>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#steganography","title":"Steganography","text":"<ul> <li>the hiding of data within other data</li> <li>intended to hide secret data inside data that appears benign</li> <li>common example is hiding data in image files</li> </ul>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#encryption_1","title":"Encryption","text":"<p>Standard encryption typically has four components to keep in mind:</p> <ol> <li>Encryption algorithm</li> <li>Message or plaintext</li> <li>Key</li> <li>Ciphertext</li> </ol>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#transposition-ciphers","title":"Transposition ciphers","text":"<p>Shift letters left or right</p>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#caesar-cipher-or-shift-cipher-rot","title":"Caesar cipher or shift cipher (ROT)","text":"<p>A shift of some defined length, e.g. ROT13</p> <p>How to break it, iterate through shifting by a certain amount until the cipohertext becomes plaintext.</p>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#caesar-box-cipher","title":"Caesar box cipher","text":"<p>The plaintext is written out into a predetermined number of rows, and padded with a <code>X</code> or <code>=</code></p> <p>HELLO SOUTH COAST in a 3 row column:</p> <pre><code>H L O H A\nE O U C S\nL S T O T\n</code></pre> <p>Makes the ciphertext: <code>HLOHAEOUCSLSTOT</code></p>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#atbash","title":"Atbash","text":"<p>The first letter of the alphabet becomes the last. Then the ciphertext is made by looking up the message in the atbash Interstingly applied first to Hebrew language, and used in the Bible</p> <pre><code>import string\nfrom collections import deque\n\n# Make the alphabetic lists - notice only lowercase for convenmiance \nabc = deque(list(string.ascii_lowercase))\natbash = deque(list(string.ascii_lowercase))\natbash.reverse()\n\nmessage = 'babylon'\nciphertext= ''\n# lets iterate over each charachter in the message to make our ciphertext\nfor i,s in enumerate(message):\n    idx = abc.index(s.lower())\n    cipher_char = atbash[idx]\n    ciphertext += cipher_char\nprint(ciphertext)\n</code></pre> <p>Outputs: <code>yzybolm</code></p>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#substitution-cipher","title":"Substitution cipher","text":"<p>Mainly intended for plaintext ciphers. Mapping of alphabetic charachters to another charachter</p>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#one-time-pad","title":"One time pad","text":"<p>Ref</p> <p>ref with good hiostory</p> <ol> <li>plaintext</li> <li>key - at last as long as plaintext, and random</li> <li>one time pad - only used once, destroyed after use</li> </ol> <p>Example of a pad; use only one of the rows:</p> <p>Using row 'A'</p> <p>H E L L O == 7 4 11 11 14 M O N E Y == 12 14 13 4 24</p> <p>A+B       = 19 18 24 15 38</p> <p>We only need 0 to 25 so:</p> <p>% 26 = 19 18 24 15 12 == T S Y P M</p> <pre><code>    0 1 2 3 4 5 6 7 8 9 ...\n    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \n   +----------------------------------------------------\nA | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\nB | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A\nC | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\nD | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\n...\n</code></pre>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#vigenere","title":"Vigen\u00e8re","text":"<p>ref</p> <p>Uses a <code>tabula recta</code> to transpose plaintext agains a key. Very similar to a one time pad.</p>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#xor","title":"XOR","text":"<p>Operates on bytes- as good as one time pad if key is same length as plaintext</p> <pre><code>1 ^ 1 = 0\n1 ^ 0 = 1\n0 ^ 0 = 0\n</code></pre>","tags":["lesson","crypto"]},{"location":"lessons/07_crypto_intro/#breaking-encryption","title":"Breaking encryption","text":"<p>Good encryption is hard, and common vulnerabilities are well documented. They fall into a few catagories</p> <ol> <li>Computational feasability</li> <li>Implementation error</li> <li>Algorithm error</li> <li>Key exchange compromise</li> </ol>","tags":["lesson","crypto"]},{"location":"lessons/08_forensics_intro/","title":"08 Intro to Forensics","text":"<p>Forensics is the discovery of data that proves or disproves a hypothesis.</p> <p>It is really challenging to not leave a digital fingerprint behind. </p> <p>The systems are generating more artefacts of forensic use as they  increase their support of conveniance and security.</p> <p>We use forensics to find out:</p> <ul> <li>what happened</li> <li>who did it</li> </ul>","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#resources-and-labs","title":"Resources and labs","text":"<ol> <li>Look at the training videos in picoCTF</li> <li>CTF101 on forensics</li> <li>labs - pico forensics playlist</li> </ol>","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#the-big-picture","title":"The big picture","text":"<p>A file on a your computer constist typically of metadata and data.</p> <p>That file sits on top of a filesystem  - the filesystem defines how to allocate data blocks for a  file and recover them again when required, and delete that data when not needed. </p> <p>The volume or partition is a logical conatiner for a filesystem, so that a file system can span  physical devices or have many filesytems on one device.</p> <p>The physical media contais the raw storage media and presents the ability address data blocks and access those blocks for reading and writing.</p> <pre><code>block-beta\n  columns 3\n  e(\"Metadata\"):1\n  f(\"Data\"):2\n  d(\"Files\"):3\n  c(\"File system\"):3\n  b(\"Partition - file system containers\"):3\n  a(\"Physical hardware\"):3\n</code></pre>","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#file-forensics","title":"File forensics","text":"<p>A file is a sequence of bytes that represents some type of data. The file typically has some bytes to show what type of file it is,  some metatdata, and the data itself.</p>","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#file-formats","title":"File formats","text":"<p>A program will try and process a data file based on how it is programmed to process the bytes in the file. Often the operating system uses the filename extension to know what application to use to load the file.</p> <p>Different file formats can be very differnt. They include bytes in a file as plain text, more complex text formats like docx, executable files (exe, dll, so, ...), images (jpeg, png...), and even files that are another filesystem of files (iso).</p>","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#magic-bytes","title":"Magic bytes","text":"<p>For an application to confirm what type of file it has loaded, it will read the first bytes of the file, which contains a common signature per file format known as the magic bytes.</p> <p>THis sequence of bytes at the start of a file uniquely identifies the file type. The file extensions, like <code>.jpeg</code> is a helper, but is just part of the name of the file on the file system. For example if you take a hash of  file and change the filename, the hash remeains the same.</p>","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#metadata","title":"Metadata","text":"<p>Many more complex file types contain data metadata, that is , data about the data within. THis may include timestamps, comments, author, and them=n more specific data for the format itself, such as size of the image or where it was taken.</p>","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#file-systems","title":"File systems","text":"<p>The file sytem is a logical manager of data files on disk. It has its own attributes such as file magic, metadata about itself, then data about the files, such as where they are, when they got there, how big they are.</p>","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#file-system-forensics","title":"File system forensics","text":"<p>The file system leaves allot of history of old files, and remnants of old data. We may cover some of this later.</p>","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#tools","title":"Tools","text":"","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#file-forensics_1","title":"File forensics","text":"<p>On Linux the following tools will be you first points of call</p>","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#metadata_1","title":"Metadata","text":"<ol> <li><code>file</code> to display what type of data is in the file by the magic bytes</li> <li><code>exiftool</code> to dump metadata of an image and many other file types</li> <li><code>objdump</code> to dump data and other attributes of executable files</li> </ol>","tags":["lesson","forensics"]},{"location":"lessons/08_forensics_intro/#analysing-content","title":"Analysing content","text":"<ol> <li><code>strings</code> to extract data from a binary format</li> <li><code>xxd</code> to vieew the hex representation of a file content. THis is useful as many data formats will use  byte values, versus text, to represent some things, as they are not intended for raw human consumtion. Pipe <code>xxd</code> to a program like <code>head</code> to view file magic. e.g. <code>xxd filename | head</code></li> </ol>","tags":["lesson","forensics"]},{"location":"lessons/09_steganography/","title":"09 Steganography","text":"<p>Hiding data in plain sight. We covered in forensics that there are file formats such as immages, pdf, even filesystems.  Each of these formats can be abused somewhat to hide data in either legitimate structures of the format, or by overloading the format without braking it.</p> <p>An excellent quote:</p> <p>Steganography is hard for the defence side, because there\u2019s practically an infinite number of ways it could be carried out.</p> <p>Source CTF 101</p> <p>Good news is that practically within a finite number of bytes there is a finite number of permutations to hide data, but there is allot.</p>","tags":["lesson","forensics"]},{"location":"lessons/09_steganography/#common-ctf-steganography","title":"Common CTF Steganography","text":"<ol> <li>Metadata: EXIF</li> <li>Strings</li> <li>Establish steg tools</li> </ol>","tags":["lesson","forensics"]},{"location":"lessons/09_steganography/#commopn-tools","title":"Commopn tools","text":"<ul> <li>Any file metadata tool - Exiftool is a good start</li> <li>Stegdetect</li> </ul>","tags":["lesson","forensics"]},{"location":"lessons/10_re/","title":"10 Reverse Engineering","text":"<p>Reverse engineering is the process of discovering the way a binary works.</p>","tags":["lesson","re"]},{"location":"lessons/10_re/#tools","title":"Tools","text":"<p>There are two primary tools we will focus on:</p> <ol> <li><code>strings</code></li> <li><code>objdump</code></li> </ol>","tags":["lesson","re"]},{"location":"lessons/10_re/#approaches","title":"Approaches","text":"<ol> <li>Static - the binary is not running</li> <li>Dynamic- running the binary</li> </ol>","tags":["lesson","re"]},{"location":"lessons/10_re/#static","title":"Static","text":"<p>You are sometimes fortunate to have the source of executable content. If not you are looking at reading assembly language.</p> <ol> <li>Read source code</li> <li>Look at strings</li> <li>Inspect object</li> <li>Decompiler - returns assembly language or in the case of Ghidra a decompiled C source</li> </ol>","tags":["lesson","re"]},{"location":"lessons/10_re/#dynamic","title":"Dynamic","text":"<p>Useful to tell what the code actually does, and allow some protections to execute, and deobfuscate code ionto memory</p> <p>A great example of this is the pico challenge Classic Crackme 0x100</p> <p>Use a solution like these to walk through:</p> <ul> <li>https://dev.to/7jw92nvd1klaq1/picoctf-classic-crackme-0x100-walkthrough-4d16</li> <li>https://anugrahn1.github.io/pico2024#classic-crackme-0x100-300-pts</li> </ul>","tags":["lesson","re"]},{"location":"lessons/ai_coding/","title":"11 AI","text":"<ol> <li>Generative AI</li> <li>AI ethics</li> <li>Intro to AI pair programming</li> <li>awareness of  different AI coding tools</li> </ol>","tags":["lesson","forensics"]},{"location":"lessons/ai_coding/#generative-ai","title":"Generative AI","text":"<p>The creation of new content using AI. The AI model collates all the information it can access, and produces a aggregated new content from that data.</p> <p>This is great for most things, but AI will get things wrong, and will miss out on deeper expertise. So it is best suited to simpler tasks, and where a problem has an answer that is absolute.</p>","tags":["lesson","forensics"]},{"location":"lessons/ai_coding/#ai-ethics","title":"AI ethics","text":"<p>\ud83e\udde0 Some AI usage and ethics to apply</p> <ol> <li>Use AI for approprate tasks<ol> <li>Maintain control of major decision making</li> <li>Does explainability matter for your applciation?</li> </ol> </li> <li>Maintain critical thinking<ol> <li>Can you verify correctness of the content</li> <li>Use the generated content to learn</li> </ol> </li> <li>Acknowledge use of a generative AI tool</li> <li>Be aware of the age of the data the AI was trained on - e.g. ChatGPT 3.5 was trained 2 years ago.</li> <li>Be aware of AI hallicination - the AI can collate information in a way that generates false information, both deliberately and accidentaly. The AI does not understand the content it generates.<ul> <li>Example of when this matters</li> </ul> </li> </ol>","tags":["lesson","forensics"]},{"location":"lessons/ai_coding/#using-ai-for-programming","title":"Using AI for programming","text":"<p>AI is a useful tool but be aware it does get things wrong. It is trained on public data, and some of this data is inaccurate. </p>","tags":["lesson","forensics"]},{"location":"lessons/ai_coding/#pair-programming-with-ai","title":"Pair programming with AI","text":"<p>We can program with generative AI using chat to ask for a program function to give a starting point. </p> <p>To do this effectively:</p> <ol> <li>Keep the problems relatively simple and discrete</li> </ol> <p>Alterantively, as we code the AI can do interactive code completion. Within a interactive development environment, like Microsoft Visual Studio Code, the AI will read your code, and develop boilerplate code suggestions.</p> <p>To do this effectively: 1. Write clear comments that explain the intent of your code - the AI reads these like a person would 1. Review all code suggestions - make sure you understand the code it has suggested, and test its output is as expected 1. Use to fast prototype - this fits CTFs really well</p>","tags":["lesson","forensics"]},{"location":"lessons/ai_coding/#generative-ai-platform-options","title":"Generative AI platform options","text":"<p>There are many - the below are a couple you can try without having to sign up.</p> <ul> <li>ChatGPT on the web Fast and generally ok results.</li> <li>Copilot on the web Results a little slow, but not too bad</li> </ul>","tags":["lesson","forensics"]},{"location":"lessons/ai_coding/#test-it-out","title":"Test it out","text":"<p>Use the Pecan love letter challenge love letter</p> <p>We already know how we want to solve it</p> <pre><code>write a python program to take the list of numbers:  [315, 324, 363, 294, 294, 363], divide each number in the list by three, then print the corresponding ascii value of each number as a string\n</code></pre>","tags":["lesson","forensics"]},{"location":"lessons/ai_coding/#references","title":"References","text":"<ul> <li>Ai assistance for pair programming</li> </ul>","tags":["lesson","forensics"]},{"location":"slides/01_intro/","title":"Welcome to PECAN training","text":"<p>Welcome to the first week of PECAN training. The aim of these training sessions is to get you ready to compete, but most importantly, you will learn some valuable skills along the way.</p>","tags":["lesson","ctf"]},{"location":"slides/01_intro/#objectives","title":"Objectives","text":"<ol> <li>Why learn cyber security</li> <li>Ethical hacking</li> <li>Understand CTF</li> <li>set up hacking station</li> <li>set up pico ctf account</li> <li>pico playlist - general</li> </ol>","tags":["lesson","ctf"]},{"location":"slides/01_intro/#about-cyber-security","title":"About cyber security","text":"<p>Our objective with these modules is to learn more about cyber security and have fun doing it!</p> <p>Cyber security typically involves the CIA of data:</p> <ol> <li>Confidentiality - my data can only been seen by those authorised.</li> <li>Integrity- my data can only be changed by those authorised.</li> <li>Availability - I can access my data when I need it.</li> </ol> <p>Different data types and uses typically vary in sensitivity across the three. For example, weather information may be available publically, but it causes major issues when it is unavailable. Whereas, the secret position of a Submarine could be missed for a bit, but undermines the safety of people if its confidentiality is broken.</p>","tags":["lesson","ctf"]},{"location":"slides/01_intro/#why-even-ctf","title":"Why even CTF","text":"<p>Participating in this series will give you some skills to protect your data, and an idea of what a career in cyber can include.</p> <p></p>","tags":["lesson","ctf"]},{"location":"slides/01_intro/#ethical-hacking","title":"Ethical hacking","text":"<p>Hacking now refers to unauthorised computer access, this is colloquially known as blackhat hacking.  Breaking into computers is wrong (illegal) when not authorised.  For example, according to the Cybercrime Act 2001 parts 10.7</p> <p>``` 478.1  Unauthorised access to, or modification of, restricted data</p> <p>(1) A person is guilty of an offence if:</p> <pre><code>(a) the person causes any unauthorised access to, or modification of, restricted data; and\n\n(b) the person intends to cause the access or modification; and\n\n(c) the person knows that the access or modification is unauthorised; and\n\n(d) one or more of the following applies:\n\n    (i) the restricted data is held in a Commonwealth computer;\n\n    (ii) the restricted data is held on behalf of the Commonwealth;\n\n    (iii) the access to, or modification of, the restricted data is caused by means of a telecommunications service.\n</code></pre> <p>Penalty: 2 years imprisonment.</p> <p>(2) Absolute liability applies to paragraph (1)(d).</p> <p>(3) In this section:</p> <pre><code>restricted data means data:\n\n(a) held in a computer; and\n\n(b) to which access is restricted by an access control system associated with a function of the computer.\n</code></pre> <p>```</p> <p>However, without understanding how the systems are broken into, or testing the controls in place, we are struggling to defend our data as cyber security professionals. So with appropriate approvals in place, that is you have written approval to exploit a security control(s), ethical hacking is the application of cyber dark arts to ensure we can protect our systems from those who wish to do them harm.</p> <p>You will learn some techniques that can be used in the hacking of systems. This is a privilege not to be abused.</p> <p></p>","tags":["lesson","ctf"]},{"location":"slides/2025/","title":"CTF Strategy 2025","text":"<p>Welcome to Cyber skills 2025!</p> <ul> <li>Intro</li> <li>Why CTF</li> </ul>","tags":["lesson","ctf"]},{"location":"slides/2025/#focus-for-2025","title":"Focus for 2025","text":"<p>Training through walkthroughs. To always be planning for a CTF.</p>","tags":["lesson","ctf"]},{"location":"slides/2025/#focus-areas","title":"Focus areas","text":"<ol> <li>Web exploitation; more</li> <li>OSINT; do the challenges, this was well done in 2024 with little training</li> <li>Python; more, use it where you can</li> <li>AI exploitation; we are seeing some of these in CTFs now, so will look at some walkthroughs</li> <li>Cryptography; very common, know the common challenges</li> <li>Binaries; how to run them and strings them</li> </ol>","tags":["lesson","ctf"]},{"location":"slides/2025/#what-we-wont-do","title":"What we wont do","text":"<ol> <li>Networking and network forensics (we will still do web)</li> <li>Reverse engineering (apart from <code>strings</code>)</li> </ol>","tags":["lesson","ctf"]},{"location":"slides/2025/#setup","title":"Setup","text":"<p>Ideally you can do this from school and home</p>","tags":["lesson","ctf"]},{"location":"slides/2025/#accounts-required","title":"Accounts required","text":"<ul> <li>CTFTime</li> <li>A register of allot of CTFs we can do.</li> <li>Please confirm with your teacher and parents before joining a CTF.</li> <li>PicoCTF - you will be provided with login details</li> <li>great for training videos and challenges at all levels.</li> <li>about</li> <li>Hack The Box</li> <li>some 'simple' challenges but expects far more base knowledge</li> </ul>","tags":["lesson","ctf"]},{"location":"slides/2025/#ctf-attack-station","title":"CTF Attack station","text":"<ul> <li>You can use your local system for some challenges, particularly if using online tools</li> <li>Kali linux will be needed for more hacker like challenges</li> </ul>","tags":["lesson","ctf"]},{"location":"slides/2025/#schedule-of-ctfs","title":"Schedule of CTFs","text":"date ctf url walkthroughs 6-18 June 2025 US Cyber Games beginner https://ctftime.org/event/2716 https://github.com/MDaleyJr/US-Cyber-Games-SeasonIV/tree/main https://github.com/jselliott/SIV-US-Cyber-Open 18-20 Jul 2025 Down Under CTF - Official write-ups 24 Aug 2025 PeCan CTF --- -","tags":["lesson","ctf"]},{"location":"slides/2025/#resources","title":"Resources","text":"<ul> <li>workflows for ctf</li> </ul>","tags":["lesson","ctf"]},{"location":"slides/web/","title":"Web","text":""},{"location":"x_drafts/about_hacking_station/","title":"Your hacking station","text":"<p>making sure you can start your hacking station</p> <p>Kali is the operating system of choice. It is Linux based, and very similar in use to the Ubuntu/Debian hosts we used in Cyber Taipan</p>","tags":["guide"]},{"location":"x_drafts/kali/","title":"Kali","text":"<p>tags:     - guide</p>"},{"location":"x_drafts/kali/#setting-up-kali","title":"Setting up kali","text":""},{"location":"x_drafts/kali/#startup-script-for-kasm","title":"Startup script for kasm","text":"<pre><code>function apt_install_tools(){\n    A_TOOLS=(netcat\n    nano\n    xxd\n    binwalk\n    exiftool \n    burp  \n    wireshark \n    nmap \n    hashcat\n    )\n    for i in \"${A_TOOLS[@]}\"; do\n        apt install -y \"${i}\" &gt;/dev/null 2&gt;&amp;1 &amp; disown\n    done\n\n}\nsudo apt_install_tools\n</code></pre>"}]}